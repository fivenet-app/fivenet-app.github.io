[{"data":1,"prerenderedAt":1846},["ShallowReactive",2],{"navigation":3,"/getting-started/configuration/dbsync":171,"/getting-started/configuration/dbsync-surround":1842},[4,77,129,147],{"title":5,"path":6,"stem":7,"children":8},"Getting Started","/getting-started","1.getting-started/1.index",[9,10,14,18,22,48,52],{"title":5,"path":6,"stem":7},{"title":11,"path":12,"stem":13},"Requirements","/getting-started/requirements","1.getting-started/1.requirements",{"title":15,"path":16,"stem":17},"Features","/getting-started/features","1.getting-started/2.features",{"title":19,"path":20,"stem":21},"Components","/getting-started/components","1.getting-started/3.components",{"title":23,"path":24,"stem":25,"children":26,"page":47},"Configuration","/getting-started/configuration","1.getting-started/3.configuration",[27,31,35,39,43],{"title":28,"path":29,"stem":30},"Config File Reference","/getting-started/configuration/config-reference","1.getting-started/3.configuration/1.config-reference",{"title":32,"path":33,"stem":34},"Config Examples","/getting-started/configuration/config-examples","1.getting-started/3.configuration/2.config-examples",{"title":36,"path":37,"stem":38},"ESX Compatibility Mode","/getting-started/configuration/esx-compat-mode","1.getting-started/3.configuration/2.esx-compat-mode",{"title":40,"path":41,"stem":42},"DBSync","/getting-started/configuration/dbsync","1.getting-started/3.configuration/3.dbsync",{"title":44,"path":45,"stem":46},"Command Flags","/getting-started/configuration/flags","1.getting-started/3.configuration/5.flags",false,{"title":49,"path":50,"stem":51},"Demo","/getting-started/demo","1.getting-started/4.demo",{"title":53,"path":54,"stem":55,"children":56,"page":47},"Installation","/getting-started/installation","1.getting-started/4.installation",[57,61,65,69,73],{"title":58,"path":59,"stem":60},"Methods","/getting-started/installation/methods","1.getting-started/4.installation/1.methods",{"title":62,"path":63,"stem":64},"Cloud","/getting-started/installation/cloud","1.getting-started/4.installation/2.cloud",{"title":66,"path":67,"stem":68},"Using Docker","/getting-started/installation/container-docker","1.getting-started/4.installation/3.container-docker",{"title":70,"path":71,"stem":72},"Kubernetes: Using Helm","/getting-started/installation/kubernetes-helm","1.getting-started/4.installation/4.kubernetes-helm",{"title":74,"path":75,"stem":76},"After Install Steps","/getting-started/installation/post-install-steps","1.getting-started/4.installation/6.post-install-steps",{"title":78,"path":79,"stem":80,"children":81},"User Guides","/user-guides","3.user-guides/0.index",[82,83,87,91,101,105,109,113,117,121,125],{"title":78,"path":79,"stem":80},{"title":84,"path":85,"stem":86},"Citizens","/user-guides/citizens","3.user-guides/1.citizens",{"title":88,"path":89,"stem":90},"Vehicles","/user-guides/vehicles","3.user-guides/2.vehicles",{"title":92,"path":93,"stem":94,"children":95},"Documents","/user-guides/documents","3.user-guides/3.documents/index",[96,97],{"title":92,"path":93,"stem":94},{"title":98,"path":99,"stem":100},"Templates","/user-guides/documents/templates","3.user-guides/3.documents/templates",{"title":102,"path":103,"stem":104},"Jobs","/user-guides/jobs","3.user-guides/3.jobs",{"title":106,"path":107,"stem":108},"Calendar","/user-guides/calendar","3.user-guides/4.calendar",{"title":110,"path":111,"stem":112},"Livemap","/user-guides/livemap","3.user-guides/5.livemap",{"title":114,"path":115,"stem":116},"Dispatch Center","/user-guides/centrum","3.user-guides/6.centrum",{"title":118,"path":119,"stem":120},"Mailer","/user-guides/mailer","3.user-guides/6.mailer",{"title":122,"path":123,"stem":124},"Settings","/user-guides/settings","3.user-guides/7.settings",{"title":126,"path":127,"stem":128},"Languages (i18n)","/user-guides/i18n","3.user-guides/8.i18n",{"title":130,"path":131,"stem":132,"children":133},"Development","/development","8.development/1.index",[134,135,139,143],{"title":130,"path":131,"stem":132},{"title":136,"path":137,"stem":138},"Protocol Documentation","/development/grpc-api","8.development/3.grpc-api",{"title":140,"path":141,"stem":142},"Release Process","/development/release","8.development/4.release",{"title":144,"path":145,"stem":146},"User Activity","/development/user-activity","8.development/5.user-activity",{"title":148,"path":149,"stem":150,"children":151,"page":47},"Design Docs","/design","9.design",[152,156,159,163,167],{"title":153,"path":154,"stem":155},"DB Sync","/design/db-sync","9.design/db-sync",{"title":114,"path":157,"stem":158},"/design/dispatch-center","9.design/dispatch-center",{"title":160,"path":161,"stem":162},"Employee Management","/design/employee-management","9.design/employee-management",{"title":164,"path":165,"stem":166},"Player Tracker Rework","/design/player-tracker-rework","9.design/player-tracker-rework",{"title":168,"path":169,"stem":170},"Qualifications","/design/qualifications","9.design/qualifications",{"id":172,"title":40,"body":173,"description":179,"extension":1836,"links":1837,"meta":1838,"navigation":1839,"path":41,"seo":1840,"stem":42,"__hash__":1841},"docs/1.getting-started/3.configuration/3.dbsync.md",{"type":174,"value":175,"toc":1827},"minimal",[176,180,183,204,208,220,227,234,332,338,379,385,388,393,411,439,443,447,1236,1240,1823],[177,178,179],"p",{},"The DBSync is used to sync character/player, vehicles, and other data to your FiveNet instance.",[177,181,182],{},"Reasons why you would use the DBSync are:",[184,185,186,195,198,201],"ul",{},[187,188,189,190,194],"li",{},"You are ",[191,192,193],"strong",{},"not"," using the FiveM ESX framework.",[187,196,197],{},"To run FiveNet in \"standalone\" mode independent of the gameserver.",[187,199,200],{},"You would not be able to make the gameserver's database server reachable by FiveNet (e.g., restricted gameserver hosting, firewalls you can't change).",[187,202,203],{},"You are using the FiveNet Cloud offering.",[205,206,23],"h2",{"id":207},"configuration",[177,209,210,211,215,216,219],{},"The configuration file for the DBSync by default is called ",[212,213,214],"code",{},"dbsync.yaml",".\nThe DBSync process stores the \"sync state\" in a file called ",[212,217,218],{},"dbsync.state.yaml"," by default. This file is used to keep track of the last synced data, it should persisted as to not cause the DBSync to re-sync everything again.",[177,221,222,223,226],{},"To get started make sure that you have enabled the sync and configured a sync API token in your FiveNet's ",[212,224,225],{},"config.yaml"," file.",[177,228,229,230,233],{},"The ",[212,231,232],{},"destination:"," section is where you need to configure the URL to your FiveNet instance, example:",[235,236,241],"pre",{"className":237,"code":238,"language":239,"meta":240,"style":240},"language-yaml shiki shiki-themes material-theme-lighter material-theme material-theme-palenight","destination:\n  # Host + port to your FiveNet instance (requires HTTPS/valid TLS certs, unless insecure is set to `true`)\n  url: \"fivenet.example.com\"\n  token: \"YOUR_SYNC_API_TOKEN\"\n  # Disable TLS verification (not recommended)\n  insecure: false\n  # Sync Interval can also be specified per table in the `tables:` section\n  syncInterval: 5s\n","yaml","",[212,242,243,256,263,282,297,303,315,321],{"__ignoreMap":240},[244,245,248,252],"span",{"class":246,"line":247},"line",1,[244,249,251],{"class":250},"swJcz","destination",[244,253,255],{"class":254},"sMK4o",":\n",[244,257,259],{"class":246,"line":258},2,[244,260,262],{"class":261},"sHwdD","  # Host + port to your FiveNet instance (requires HTTPS/valid TLS certs, unless insecure is set to `true`)\n",[244,264,266,269,272,275,279],{"class":246,"line":265},3,[244,267,268],{"class":250},"  url",[244,270,271],{"class":254},":",[244,273,274],{"class":254}," \"",[244,276,278],{"class":277},"sfazB","fivenet.example.com",[244,280,281],{"class":254},"\"\n",[244,283,285,288,290,292,295],{"class":246,"line":284},4,[244,286,287],{"class":250},"  token",[244,289,271],{"class":254},[244,291,274],{"class":254},[244,293,294],{"class":277},"YOUR_SYNC_API_TOKEN",[244,296,281],{"class":254},[244,298,300],{"class":246,"line":299},5,[244,301,302],{"class":261},"  # Disable TLS verification (not recommended)\n",[244,304,306,309,311],{"class":246,"line":305},6,[244,307,308],{"class":250},"  insecure",[244,310,271],{"class":254},[244,312,314],{"class":313},"sfNiH"," false\n",[244,316,318],{"class":246,"line":317},7,[244,319,320],{"class":261},"  # Sync Interval can also be specified per table in the `tables:` section\n",[244,322,324,327,329],{"class":246,"line":323},8,[244,325,326],{"class":250},"  syncInterval",[244,328,271],{"class":254},[244,330,331],{"class":277}," 5s\n",[177,333,229,334,337],{},[212,335,336],{},"source:"," section holds the database connection details of your gameserver database which holds the tables you want to sync to FiveNet.",[235,339,341],{"className":237,"code":340,"language":239,"meta":240,"style":240},"# Changes to the source require a restart of the dbsync\nsource:\n  # Refer to https://github.com/go-sql-driver/mysql#dsn-data-source-name for details\n  # Please note that the `parseTime` parameter is allows set to true\n  dsn: \"DB_USER:DB_PASS@tcp(DB_HOST:DB_PORT)/DB_NAME?collation=utf8mb4_unicode_ci&loc=Europe%2FBerlin\"\n",[212,342,343,348,355,360,365],{"__ignoreMap":240},[244,344,345],{"class":246,"line":247},[244,346,347],{"class":261},"# Changes to the source require a restart of the dbsync\n",[244,349,350,353],{"class":246,"line":258},[244,351,352],{"class":250},"source",[244,354,255],{"class":254},[244,356,357],{"class":246,"line":265},[244,358,359],{"class":261},"  # Refer to https://github.com/go-sql-driver/mysql#dsn-data-source-name for details\n",[244,361,362],{"class":246,"line":284},[244,363,364],{"class":261},"  # Please note that the `parseTime` parameter is allows set to true\n",[244,366,367,370,372,374,377],{"class":246,"line":299},[244,368,369],{"class":250},"  dsn",[244,371,271],{"class":254},[244,373,274],{"class":254},[244,375,376],{"class":277},"DB_USER:DB_PASS@tcp(DB_HOST:DB_PORT)/DB_NAME?collation=utf8mb4_unicode_ci&loc=Europe%2FBerlin",[244,378,281],{"class":254},[177,380,229,381,384],{},[212,382,383],{},"tables:"," section is used to configure the queries for the tables you want to sync to FiveNet.\nPlease see the examples below for the ESX and QBCore frameworks.",[177,386,387],{},"Should you be using another framework, you will need to adjust the queries accordingly.",[389,390,392],"h3",{"id":391},"table-queries","Table Queries",[177,394,395,396,399,400,403,404,403,407,410],{},"The queries for the tables must return the columns in the format specified per table, e.g., to return user info the format must be ",[212,397,398],{},"user.COLUMN"," (e.g., ",[212,401,402],{},"user.id",", ",[212,405,406],{},"user.firstname",[212,408,409],{},"user.lastname",").",[177,412,413,414,417,418,421,422,424,425,427,428,417,431,434,435,438],{},"An important point to note is that it is especially important to return a consistent ",[212,415,416],{},"id"," and ",[212,419,420],{},"identifier"," field for the users/characters.\nThe ",[212,423,416],{}," field is used to identify the user in the database, and the ",[212,426,420],{}," field is used to identify the user in FiveNet.\nIn addition to being used to \"bind\" multiple users/chars to one account, e.g., identifier ",[212,429,430],{},"char1:LICENSE",[212,432,433],{},"char2:LICENSE"," and the account only has the ",[212,436,437],{},"LICENSE"," set on it.",[205,440,442],{"id":441},"example-configs","Example Configs",[389,444,446],{"id":445},"esx-framework","ESX Framework",[235,448,450],{"className":237,"code":449,"language":239,"meta":240,"style":240},"tables:\n  # The example queries here are for the ESX framework\n  jobs:\n    # Must return `job.name`, `job.label` columns\n    enabled: true\n    query: |\n      SELECT\n        `jobs`.`name` AS `job.name`,\n        `jobs`.`label` AS `job.label`\n      FROM\n        `jobs`\n      LIMIT $limit\n      OFFSET $offset;\n  jobGrades:\n    # Must return `job_grade.job_name`, `job_grade.grade`, `job_grade.label` columns (with condition for the `job_name`)\n    enabled: true\n    query:\n      SELECT\n        `job_grades`.`job_name` AS `job_grade.job_name`,\n        `job_grades`.`grade` AS `job_grade.grade`,\n        `job_grades`.`name` AS `job_grade.name`,\n        `job_grades`.`label` AS `job_grade.label`\n      FROM\n        `job_grades`\n      WHERE\n        `job_grades.job_name` = $jobName\n      LIMIT $limit\n      OFFSET $offset;\n  licenses:\n    # Must return `type`, `label` columns\n    enabled: true\n    query: |\n      SELECT\n        `license.type`,\n        `license.label`\n      FROM\n        `licenses`\n      LIMIT $limit\n      OFFSET $offset;\n  users:\n    # Must return `user.id`, `user.identifier`, `user.group`, `user.firstname`, `user.lastname`, `user.dateofbirth`, `user.job`, `user.job_grade`, `user.sex`, `user.phone_number` columns\n    # Optional columns: `user.height`, `user.visum`, `user.playtime`\n    enabled: true\n    # If your \"players\"/\"users\" data has a timestamp/datetime column that is updated on update,\n    # configure it here so that after the initial sync only the changed data is synced again.\n    #updatedTimeColumn: \"last_seen\"\n    # The identifier column should be a smart combination of values when using a multichar system.\n    # E.g., it is prefered to use a ESX like identifier layout for that case `charX:LICENSE`\n    query: |\n      SELECT\n        `users`.`id` AS `user.id`,\n        `users`.`identifier` AS `user.identifier`,\n        `users`.`group` AS `user.group`,\n        `users`.`firstname` AS `user.firstname`,\n        `users`.`lastname` AS `user.lastname`,\n        `users`.`dateofbirth` AS `user.dateofbirth`,\n        `users`.`job` AS `user.job`,\n        `users`.`job_grade` AS `user.job_grade`,\n        `users`.`sex` AS `user.sex`,\n        `users`.`phone_number` AS `user.phone_number`,\n        `users`.`height` AS `user.height`,\n        `users`.`visum` AS `user.visum`,\n        `users`.`playtime` AS `user.playtime`\n      FROM\n        `users`\n      $whereCondition\n      LIMIT $limit\n      OFFSET $offset;\n    # If a lastname is not returned by the query, attempt to split the firstname into \"two\" parts\n    splitName: true\n    # Normalize date of birth value to the output format if possible\n    # Please see the Go `time` pkg documentation on potential date format layouts: https://pkg.go.dev/time#Layout\n    dateOfBirth:\n      formats:\n        - \"2006-01-02\" # 2000-10-18 = YYYY-MM-DD\n        - \"02/01/2006\" # 09/06/1993 = MM/DD/YYYY\n        - \"02.01.2006\" # 01.08.1982 = DD.MM.YYYY\n      outputFormat: \"02.01.2006\" # DD.MM.YYYY\n    valueMapping:\n      # This allows to map values to different values for FiveNet\n      # E.g., the sex of a char must be either `m`, `f`, or `d`\n      sex:\n        fallback: 'm'\n        values:\n          '1': 'f'\n  userLicenses:\n    # Must return `user_license.type`, `user_license.owner` columns\n    enabled: true\n    query: |\n      SELECT\n        `user_licenses`.`type` AS `user_license.type`,\n        `user_licenses`.`owner AS `user_license.owner``\n      FROM\n        `user_licenses`\n      WHERE\n        `owner` = $identifier\n      LIMIT $limit\n      OFFSET $offset;\n  vehicles:\n    # Must return `vehicle.owner_id` or `vehicle.owner_identifier`, `vehicle.plate`, `vehicle.type`, `vehicle.model` columns\n    enabled: true\n    query: |\n      SELECT\n        `owned_vehicles`.`owner` AS `vehicle.owner_identifier`,\n        `owned_vehicles`.`plate` AS `vehicle.plate`,\n        `owned_vehicles`.`type` AS `vehicle.type`,\n        `owned_vehicles`.`model` AS `vehicle.model`\n      FROM\n        `owned_vehicles`\n      LIMIT $limit\n      OFFSET $offset;\n",[212,451,452,459,464,471,476,486,497,502,507,513,519,525,531,537,545,551,560,567,572,582,590,598,606,611,619,625,633,638,643,651,657,666,675,680,686,692,697,703,708,713,721,727,733,742,748,754,760,766,772,781,786,792,798,804,810,816,822,828,834,840,846,852,858,864,869,875,881,886,891,897,907,913,919,927,935,952,967,982,999,1007,1013,1019,1027,1044,1052,1073,1081,1087,1096,1105,1110,1116,1122,1127,1133,1138,1144,1149,1154,1162,1168,1177,1186,1191,1197,1203,1209,1215,1220,1226,1231],{"__ignoreMap":240},[244,453,454,457],{"class":246,"line":247},[244,455,456],{"class":250},"tables",[244,458,255],{"class":254},[244,460,461],{"class":246,"line":258},[244,462,463],{"class":261},"  # The example queries here are for the ESX framework\n",[244,465,466,469],{"class":246,"line":265},[244,467,468],{"class":250},"  jobs",[244,470,255],{"class":254},[244,472,473],{"class":246,"line":284},[244,474,475],{"class":261},"    # Must return `job.name`, `job.label` columns\n",[244,477,478,481,483],{"class":246,"line":299},[244,479,480],{"class":250},"    enabled",[244,482,271],{"class":254},[244,484,485],{"class":313}," true\n",[244,487,488,491,493],{"class":246,"line":305},[244,489,490],{"class":250},"    query",[244,492,271],{"class":254},[244,494,496],{"class":495},"s7zQu"," |\n",[244,498,499],{"class":246,"line":317},[244,500,501],{"class":277},"      SELECT\n",[244,503,504],{"class":246,"line":323},[244,505,506],{"class":277},"        `jobs`.`name` AS `job.name`,\n",[244,508,510],{"class":246,"line":509},9,[244,511,512],{"class":277},"        `jobs`.`label` AS `job.label`\n",[244,514,516],{"class":246,"line":515},10,[244,517,518],{"class":277},"      FROM\n",[244,520,522],{"class":246,"line":521},11,[244,523,524],{"class":277},"        `jobs`\n",[244,526,528],{"class":246,"line":527},12,[244,529,530],{"class":277},"      LIMIT $limit\n",[244,532,534],{"class":246,"line":533},13,[244,535,536],{"class":277},"      OFFSET $offset;\n",[244,538,540,543],{"class":246,"line":539},14,[244,541,542],{"class":250},"  jobGrades",[244,544,255],{"class":254},[244,546,548],{"class":246,"line":547},15,[244,549,550],{"class":261},"    # Must return `job_grade.job_name`, `job_grade.grade`, `job_grade.label` columns (with condition for the `job_name`)\n",[244,552,554,556,558],{"class":246,"line":553},16,[244,555,480],{"class":250},[244,557,271],{"class":254},[244,559,485],{"class":313},[244,561,563,565],{"class":246,"line":562},17,[244,564,490],{"class":250},[244,566,255],{"class":254},[244,568,570],{"class":246,"line":569},18,[244,571,501],{"class":277},[244,573,575,579],{"class":246,"line":574},19,[244,576,578],{"class":577},"sTEyZ","        `",[244,580,581],{"class":277},"job_grades`.`job_name` AS `job_grade.job_name`,\n",[244,583,585,587],{"class":246,"line":584},20,[244,586,578],{"class":577},[244,588,589],{"class":277},"job_grades`.`grade` AS `job_grade.grade`,\n",[244,591,593,595],{"class":246,"line":592},21,[244,594,578],{"class":577},[244,596,597],{"class":277},"job_grades`.`name` AS `job_grade.name`,\n",[244,599,601,603],{"class":246,"line":600},22,[244,602,578],{"class":577},[244,604,605],{"class":277},"job_grades`.`label` AS `job_grade.label`\n",[244,607,609],{"class":246,"line":608},23,[244,610,518],{"class":277},[244,612,614,616],{"class":246,"line":613},24,[244,615,578],{"class":577},[244,617,618],{"class":277},"job_grades`\n",[244,620,622],{"class":246,"line":621},25,[244,623,624],{"class":277},"      WHERE\n",[244,626,628,630],{"class":246,"line":627},26,[244,629,578],{"class":577},[244,631,632],{"class":277},"job_grades.job_name` = $jobName\n",[244,634,636],{"class":246,"line":635},27,[244,637,530],{"class":277},[244,639,641],{"class":246,"line":640},28,[244,642,536],{"class":277},[244,644,646,649],{"class":246,"line":645},29,[244,647,648],{"class":250},"  licenses",[244,650,255],{"class":254},[244,652,654],{"class":246,"line":653},30,[244,655,656],{"class":261},"    # Must return `type`, `label` columns\n",[244,658,660,662,664],{"class":246,"line":659},31,[244,661,480],{"class":250},[244,663,271],{"class":254},[244,665,485],{"class":313},[244,667,669,671,673],{"class":246,"line":668},32,[244,670,490],{"class":250},[244,672,271],{"class":254},[244,674,496],{"class":495},[244,676,678],{"class":246,"line":677},33,[244,679,501],{"class":277},[244,681,683],{"class":246,"line":682},34,[244,684,685],{"class":277},"        `license.type`,\n",[244,687,689],{"class":246,"line":688},35,[244,690,691],{"class":277},"        `license.label`\n",[244,693,695],{"class":246,"line":694},36,[244,696,518],{"class":277},[244,698,700],{"class":246,"line":699},37,[244,701,702],{"class":277},"        `licenses`\n",[244,704,706],{"class":246,"line":705},38,[244,707,530],{"class":277},[244,709,711],{"class":246,"line":710},39,[244,712,536],{"class":277},[244,714,716,719],{"class":246,"line":715},40,[244,717,718],{"class":250},"  users",[244,720,255],{"class":254},[244,722,724],{"class":246,"line":723},41,[244,725,726],{"class":261},"    # Must return `user.id`, `user.identifier`, `user.group`, `user.firstname`, `user.lastname`, `user.dateofbirth`, `user.job`, `user.job_grade`, `user.sex`, `user.phone_number` columns\n",[244,728,730],{"class":246,"line":729},42,[244,731,732],{"class":261},"    # Optional columns: `user.height`, `user.visum`, `user.playtime`\n",[244,734,736,738,740],{"class":246,"line":735},43,[244,737,480],{"class":250},[244,739,271],{"class":254},[244,741,485],{"class":313},[244,743,745],{"class":246,"line":744},44,[244,746,747],{"class":261},"    # If your \"players\"/\"users\" data has a timestamp/datetime column that is updated on update,\n",[244,749,751],{"class":246,"line":750},45,[244,752,753],{"class":261},"    # configure it here so that after the initial sync only the changed data is synced again.\n",[244,755,757],{"class":246,"line":756},46,[244,758,759],{"class":261},"    #updatedTimeColumn: \"last_seen\"\n",[244,761,763],{"class":246,"line":762},47,[244,764,765],{"class":261},"    # The identifier column should be a smart combination of values when using a multichar system.\n",[244,767,769],{"class":246,"line":768},48,[244,770,771],{"class":261},"    # E.g., it is prefered to use a ESX like identifier layout for that case `charX:LICENSE`\n",[244,773,775,777,779],{"class":246,"line":774},49,[244,776,490],{"class":250},[244,778,271],{"class":254},[244,780,496],{"class":495},[244,782,784],{"class":246,"line":783},50,[244,785,501],{"class":277},[244,787,789],{"class":246,"line":788},51,[244,790,791],{"class":277},"        `users`.`id` AS `user.id`,\n",[244,793,795],{"class":246,"line":794},52,[244,796,797],{"class":277},"        `users`.`identifier` AS `user.identifier`,\n",[244,799,801],{"class":246,"line":800},53,[244,802,803],{"class":277},"        `users`.`group` AS `user.group`,\n",[244,805,807],{"class":246,"line":806},54,[244,808,809],{"class":277},"        `users`.`firstname` AS `user.firstname`,\n",[244,811,813],{"class":246,"line":812},55,[244,814,815],{"class":277},"        `users`.`lastname` AS `user.lastname`,\n",[244,817,819],{"class":246,"line":818},56,[244,820,821],{"class":277},"        `users`.`dateofbirth` AS `user.dateofbirth`,\n",[244,823,825],{"class":246,"line":824},57,[244,826,827],{"class":277},"        `users`.`job` AS `user.job`,\n",[244,829,831],{"class":246,"line":830},58,[244,832,833],{"class":277},"        `users`.`job_grade` AS `user.job_grade`,\n",[244,835,837],{"class":246,"line":836},59,[244,838,839],{"class":277},"        `users`.`sex` AS `user.sex`,\n",[244,841,843],{"class":246,"line":842},60,[244,844,845],{"class":277},"        `users`.`phone_number` AS `user.phone_number`,\n",[244,847,849],{"class":246,"line":848},61,[244,850,851],{"class":277},"        `users`.`height` AS `user.height`,\n",[244,853,855],{"class":246,"line":854},62,[244,856,857],{"class":277},"        `users`.`visum` AS `user.visum`,\n",[244,859,861],{"class":246,"line":860},63,[244,862,863],{"class":277},"        `users`.`playtime` AS `user.playtime`\n",[244,865,867],{"class":246,"line":866},64,[244,868,518],{"class":277},[244,870,872],{"class":246,"line":871},65,[244,873,874],{"class":277},"        `users`\n",[244,876,878],{"class":246,"line":877},66,[244,879,880],{"class":277},"      $whereCondition\n",[244,882,884],{"class":246,"line":883},67,[244,885,530],{"class":277},[244,887,889],{"class":246,"line":888},68,[244,890,536],{"class":277},[244,892,894],{"class":246,"line":893},69,[244,895,896],{"class":261},"    # If a lastname is not returned by the query, attempt to split the firstname into \"two\" parts\n",[244,898,900,903,905],{"class":246,"line":899},70,[244,901,902],{"class":250},"    splitName",[244,904,271],{"class":254},[244,906,485],{"class":313},[244,908,910],{"class":246,"line":909},71,[244,911,912],{"class":261},"    # Normalize date of birth value to the output format if possible\n",[244,914,916],{"class":246,"line":915},72,[244,917,918],{"class":261},"    # Please see the Go `time` pkg documentation on potential date format layouts: https://pkg.go.dev/time#Layout\n",[244,920,922,925],{"class":246,"line":921},73,[244,923,924],{"class":250},"    dateOfBirth",[244,926,255],{"class":254},[244,928,930,933],{"class":246,"line":929},74,[244,931,932],{"class":250},"      formats",[244,934,255],{"class":254},[244,936,938,941,943,946,949],{"class":246,"line":937},75,[244,939,940],{"class":254},"        -",[244,942,274],{"class":254},[244,944,945],{"class":277},"2006-01-02",[244,947,948],{"class":254},"\"",[244,950,951],{"class":261}," # 2000-10-18 = YYYY-MM-DD\n",[244,953,955,957,959,962,964],{"class":246,"line":954},76,[244,956,940],{"class":254},[244,958,274],{"class":254},[244,960,961],{"class":277},"02/01/2006",[244,963,948],{"class":254},[244,965,966],{"class":261}," # 09/06/1993 = MM/DD/YYYY\n",[244,968,970,972,974,977,979],{"class":246,"line":969},77,[244,971,940],{"class":254},[244,973,274],{"class":254},[244,975,976],{"class":277},"02.01.2006",[244,978,948],{"class":254},[244,980,981],{"class":261}," # 01.08.1982 = DD.MM.YYYY\n",[244,983,985,988,990,992,994,996],{"class":246,"line":984},78,[244,986,987],{"class":250},"      outputFormat",[244,989,271],{"class":254},[244,991,274],{"class":254},[244,993,976],{"class":277},[244,995,948],{"class":254},[244,997,998],{"class":261}," # DD.MM.YYYY\n",[244,1000,1002,1005],{"class":246,"line":1001},79,[244,1003,1004],{"class":250},"    valueMapping",[244,1006,255],{"class":254},[244,1008,1010],{"class":246,"line":1009},80,[244,1011,1012],{"class":261},"      # This allows to map values to different values for FiveNet\n",[244,1014,1016],{"class":246,"line":1015},81,[244,1017,1018],{"class":261},"      # E.g., the sex of a char must be either `m`, `f`, or `d`\n",[244,1020,1022,1025],{"class":246,"line":1021},82,[244,1023,1024],{"class":250},"      sex",[244,1026,255],{"class":254},[244,1028,1030,1033,1035,1038,1041],{"class":246,"line":1029},83,[244,1031,1032],{"class":250},"        fallback",[244,1034,271],{"class":254},[244,1036,1037],{"class":254}," '",[244,1039,1040],{"class":277},"m",[244,1042,1043],{"class":254},"'\n",[244,1045,1047,1050],{"class":246,"line":1046},84,[244,1048,1049],{"class":250},"        values",[244,1051,255],{"class":254},[244,1053,1055,1058,1061,1064,1066,1068,1071],{"class":246,"line":1054},85,[244,1056,1057],{"class":254},"          '",[244,1059,1060],{"class":277},"1",[244,1062,1063],{"class":254},"'",[244,1065,271],{"class":254},[244,1067,1037],{"class":254},[244,1069,1070],{"class":277},"f",[244,1072,1043],{"class":254},[244,1074,1076,1079],{"class":246,"line":1075},86,[244,1077,1078],{"class":250},"  userLicenses",[244,1080,255],{"class":254},[244,1082,1084],{"class":246,"line":1083},87,[244,1085,1086],{"class":261},"    # Must return `user_license.type`, `user_license.owner` columns\n",[244,1088,1090,1092,1094],{"class":246,"line":1089},88,[244,1091,480],{"class":250},[244,1093,271],{"class":254},[244,1095,485],{"class":313},[244,1097,1099,1101,1103],{"class":246,"line":1098},89,[244,1100,490],{"class":250},[244,1102,271],{"class":254},[244,1104,496],{"class":495},[244,1106,1108],{"class":246,"line":1107},90,[244,1109,501],{"class":277},[244,1111,1113],{"class":246,"line":1112},91,[244,1114,1115],{"class":277},"        `user_licenses`.`type` AS `user_license.type`,\n",[244,1117,1119],{"class":246,"line":1118},92,[244,1120,1121],{"class":277},"        `user_licenses`.`owner AS `user_license.owner``\n",[244,1123,1125],{"class":246,"line":1124},93,[244,1126,518],{"class":277},[244,1128,1130],{"class":246,"line":1129},94,[244,1131,1132],{"class":277},"        `user_licenses`\n",[244,1134,1136],{"class":246,"line":1135},95,[244,1137,624],{"class":277},[244,1139,1141],{"class":246,"line":1140},96,[244,1142,1143],{"class":277},"        `owner` = $identifier\n",[244,1145,1147],{"class":246,"line":1146},97,[244,1148,530],{"class":277},[244,1150,1152],{"class":246,"line":1151},98,[244,1153,536],{"class":277},[244,1155,1157,1160],{"class":246,"line":1156},99,[244,1158,1159],{"class":250},"  vehicles",[244,1161,255],{"class":254},[244,1163,1165],{"class":246,"line":1164},100,[244,1166,1167],{"class":261},"    # Must return `vehicle.owner_id` or `vehicle.owner_identifier`, `vehicle.plate`, `vehicle.type`, `vehicle.model` columns\n",[244,1169,1171,1173,1175],{"class":246,"line":1170},101,[244,1172,480],{"class":250},[244,1174,271],{"class":254},[244,1176,485],{"class":313},[244,1178,1180,1182,1184],{"class":246,"line":1179},102,[244,1181,490],{"class":250},[244,1183,271],{"class":254},[244,1185,496],{"class":495},[244,1187,1189],{"class":246,"line":1188},103,[244,1190,501],{"class":277},[244,1192,1194],{"class":246,"line":1193},104,[244,1195,1196],{"class":277},"        `owned_vehicles`.`owner` AS `vehicle.owner_identifier`,\n",[244,1198,1200],{"class":246,"line":1199},105,[244,1201,1202],{"class":277},"        `owned_vehicles`.`plate` AS `vehicle.plate`,\n",[244,1204,1206],{"class":246,"line":1205},106,[244,1207,1208],{"class":277},"        `owned_vehicles`.`type` AS `vehicle.type`,\n",[244,1210,1212],{"class":246,"line":1211},107,[244,1213,1214],{"class":277},"        `owned_vehicles`.`model` AS `vehicle.model`\n",[244,1216,1218],{"class":246,"line":1217},108,[244,1219,518],{"class":277},[244,1221,1223],{"class":246,"line":1222},109,[244,1224,1225],{"class":277},"        `owned_vehicles`\n",[244,1227,1229],{"class":246,"line":1228},110,[244,1230,530],{"class":277},[244,1232,1234],{"class":246,"line":1233},111,[244,1235,536],{"class":277},[389,1237,1239],{"id":1238},"qbcore-framework","QBCore Framework",[235,1241,1243],{"className":237,"code":1242,"language":239,"meta":240,"style":240},"tables:\n  jobs:\n    # Must return `name`, `label` columns\n    enabled: false\n    query: |\n      SELECT\n        `jobs`.`name` AS `job.name`,\n        `jobs`.`label` AS `job.label`\n      FROM\n        `jobs`\n      LIMIT $limit\n      OFFSET $offset;\n  jobGrades:\n    # Must return `job_name`, `grade`, `label` columns (with condition for the `job_name` (`$jobName`))\n    enabled: false\n    query: |\n      SELECT\n        `job_grades`.`job_name` AS `job_grade.job_name`,\n        `job_grades`.`grade` AS `job_grade.grade`,\n        `job_grades`.`label` AS `job_grade.label`\n      FROM\n        `job_grades`\n      WHERE\n        `job_name` = $jobName\n      LIMIT $limit\n      OFFSET $offset;\n  licenses:\n    # Must return `type`, `label` columns\n    enabled: false\n    query: |\n      SELECT\n        `licenses`.`type` AS `license.type`,\n        `licenses`.`label` AS `license.label`\n      FROM\n        `licenses`\n      LIMIT $limit\n      OFFSET $offset;\n  users:\n    # Must return `id`, `identifier`, `group`, `firstname`, `lastname`, `dateofbirth`, `job`, `job_grade`, `sex`, `phone_number` columns\n    # Optional `height`, `visum`, `playtime` columns\n    enabled: false\n    #updatedTimeColumn: \"last_seen\"\n    # The identifier column should be a smart combination of values when using a multichar system.\n    # E.g., it is prefered to use a ESX like identifier layout for that case `charX:LICENSE`\n    query: |\n      SELECT\n        `players`.`id` AS `user.id`,\n        CONCAT(`players`.`cid`, ':', `players`.`citizenid`) AS `user.identifier`,\n        'user' AS `user.group`,\n        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.firstname')) AS `user.firstname`,\n        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.lastname')) AS `user.lastname`,\n        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.birthdate')) AS `user.dateofbirth`,\n        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.height')) AS `user.height`,\n        JSON_UNQUOTE(JSON_EXTRACT(`players`.`job`, '$.name')) AS `user.job`,\n        JSON_UNQUOTE(JSON_EXTRACT(`players`.`job`, '$.grade.level')) AS `user.job_grade`,\n        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.gender')) AS `user.sex`,\n      FROM\n        `players`\n      $whereCondition\n      LIMIT $limit\n      OFFSET $offset;\n    # If a lastname is not returned by the query, attempt to split the firstname into \"two\" parts\n    splitName: true\n    # Normalize date of birth value to the output format if possible\n    # Please see the Go `time` pkg documentation on potential date format layouts: https://pkg.go.dev/time#Layout\n    dateOfBirth:\n      formats:\n        - \"2006-01-02\" # 2000-10-18 = YYYY-MM-DD\n        - \"02/01/2006\" # 09/06/1993 = MM/DD/YYYY\n        - \"02.01.2006\" # 01.08.1982 = DD.MM.YYYY\n      outputFormat: \"02.01.2006\" # DD.MM.YYYY\n    valueMapping:\n      sex:\n        fallback: 'm'\n        values:\n          '1': 'f'\n  userLicenses:\n    # Must return `type`, `owner` columns\n    enabled: false\n    query: |\n      SELECT\n        `user_licenses`.`type` AS `user_license.type`,\n        `user_licenses`.`owner` AS `user_license.owner`\n      FROM\n        `user_licenses`\n      WHERE\n        `owner` = $identifier\n      LIMIT $limit\n      OFFSET $offset;\n  vehicles:\n    # Must return `owner_id` (DB User ID) or `owner_identifier`, `plate`, `type`, `model` columns\n    enabled: true\n    query: |\n      SELECT\n        IF(`player_vehicles`.job_vehicle=0, CONCAT(players.cid, ':', players.`citizenid`), NULL) AS `vehicle.owner_identifier`,\n        `player_vehicles`.`plate` AS `vehicle.plate`,\n        `player_vehicles`.`garage_type` AS `vehicle.type`,\n        `player_vehicles`.`vehicle` AS `vehicle.model`,\n        IF(`player_vehicles`.`job_vehicle`=1, `player_vehicles`.`citizenid`, NULL) AS `vehicle.job`\n      FROM\n        `player_vehicles`\n        LEFT JOIN `players` ON (`players`.`citizenid` = `player_vehicles`.`citizenid`)\n      LIMIT $limit\n      OFFSET $offset;\n",[212,1244,1245,1251,1257,1262,1270,1278,1282,1286,1290,1294,1298,1302,1306,1312,1317,1325,1333,1337,1342,1347,1352,1356,1361,1365,1370,1374,1378,1384,1388,1396,1404,1408,1413,1418,1422,1426,1430,1434,1440,1445,1450,1458,1462,1466,1470,1478,1482,1487,1492,1497,1502,1507,1512,1517,1522,1527,1532,1536,1541,1545,1549,1553,1557,1565,1569,1573,1579,1585,1597,1609,1621,1635,1641,1647,1659,1665,1681,1687,1692,1700,1708,1712,1716,1721,1725,1729,1733,1737,1741,1745,1751,1756,1764,1772,1776,1781,1786,1791,1796,1801,1805,1810,1815,1819],{"__ignoreMap":240},[244,1246,1247,1249],{"class":246,"line":247},[244,1248,456],{"class":250},[244,1250,255],{"class":254},[244,1252,1253,1255],{"class":246,"line":258},[244,1254,468],{"class":250},[244,1256,255],{"class":254},[244,1258,1259],{"class":246,"line":265},[244,1260,1261],{"class":261},"    # Must return `name`, `label` columns\n",[244,1263,1264,1266,1268],{"class":246,"line":284},[244,1265,480],{"class":250},[244,1267,271],{"class":254},[244,1269,314],{"class":313},[244,1271,1272,1274,1276],{"class":246,"line":299},[244,1273,490],{"class":250},[244,1275,271],{"class":254},[244,1277,496],{"class":495},[244,1279,1280],{"class":246,"line":305},[244,1281,501],{"class":277},[244,1283,1284],{"class":246,"line":317},[244,1285,506],{"class":277},[244,1287,1288],{"class":246,"line":323},[244,1289,512],{"class":277},[244,1291,1292],{"class":246,"line":509},[244,1293,518],{"class":277},[244,1295,1296],{"class":246,"line":515},[244,1297,524],{"class":277},[244,1299,1300],{"class":246,"line":521},[244,1301,530],{"class":277},[244,1303,1304],{"class":246,"line":527},[244,1305,536],{"class":277},[244,1307,1308,1310],{"class":246,"line":533},[244,1309,542],{"class":250},[244,1311,255],{"class":254},[244,1313,1314],{"class":246,"line":539},[244,1315,1316],{"class":261},"    # Must return `job_name`, `grade`, `label` columns (with condition for the `job_name` (`$jobName`))\n",[244,1318,1319,1321,1323],{"class":246,"line":547},[244,1320,480],{"class":250},[244,1322,271],{"class":254},[244,1324,314],{"class":313},[244,1326,1327,1329,1331],{"class":246,"line":553},[244,1328,490],{"class":250},[244,1330,271],{"class":254},[244,1332,496],{"class":495},[244,1334,1335],{"class":246,"line":562},[244,1336,501],{"class":277},[244,1338,1339],{"class":246,"line":569},[244,1340,1341],{"class":277},"        `job_grades`.`job_name` AS `job_grade.job_name`,\n",[244,1343,1344],{"class":246,"line":574},[244,1345,1346],{"class":277},"        `job_grades`.`grade` AS `job_grade.grade`,\n",[244,1348,1349],{"class":246,"line":584},[244,1350,1351],{"class":277},"        `job_grades`.`label` AS `job_grade.label`\n",[244,1353,1354],{"class":246,"line":592},[244,1355,518],{"class":277},[244,1357,1358],{"class":246,"line":600},[244,1359,1360],{"class":277},"        `job_grades`\n",[244,1362,1363],{"class":246,"line":608},[244,1364,624],{"class":277},[244,1366,1367],{"class":246,"line":613},[244,1368,1369],{"class":277},"        `job_name` = $jobName\n",[244,1371,1372],{"class":246,"line":621},[244,1373,530],{"class":277},[244,1375,1376],{"class":246,"line":627},[244,1377,536],{"class":277},[244,1379,1380,1382],{"class":246,"line":635},[244,1381,648],{"class":250},[244,1383,255],{"class":254},[244,1385,1386],{"class":246,"line":640},[244,1387,656],{"class":261},[244,1389,1390,1392,1394],{"class":246,"line":645},[244,1391,480],{"class":250},[244,1393,271],{"class":254},[244,1395,314],{"class":313},[244,1397,1398,1400,1402],{"class":246,"line":653},[244,1399,490],{"class":250},[244,1401,271],{"class":254},[244,1403,496],{"class":495},[244,1405,1406],{"class":246,"line":659},[244,1407,501],{"class":277},[244,1409,1410],{"class":246,"line":668},[244,1411,1412],{"class":277},"        `licenses`.`type` AS `license.type`,\n",[244,1414,1415],{"class":246,"line":677},[244,1416,1417],{"class":277},"        `licenses`.`label` AS `license.label`\n",[244,1419,1420],{"class":246,"line":682},[244,1421,518],{"class":277},[244,1423,1424],{"class":246,"line":688},[244,1425,702],{"class":277},[244,1427,1428],{"class":246,"line":694},[244,1429,530],{"class":277},[244,1431,1432],{"class":246,"line":699},[244,1433,536],{"class":277},[244,1435,1436,1438],{"class":246,"line":705},[244,1437,718],{"class":250},[244,1439,255],{"class":254},[244,1441,1442],{"class":246,"line":710},[244,1443,1444],{"class":261},"    # Must return `id`, `identifier`, `group`, `firstname`, `lastname`, `dateofbirth`, `job`, `job_grade`, `sex`, `phone_number` columns\n",[244,1446,1447],{"class":246,"line":715},[244,1448,1449],{"class":261},"    # Optional `height`, `visum`, `playtime` columns\n",[244,1451,1452,1454,1456],{"class":246,"line":723},[244,1453,480],{"class":250},[244,1455,271],{"class":254},[244,1457,314],{"class":313},[244,1459,1460],{"class":246,"line":729},[244,1461,759],{"class":261},[244,1463,1464],{"class":246,"line":735},[244,1465,765],{"class":261},[244,1467,1468],{"class":246,"line":744},[244,1469,771],{"class":261},[244,1471,1472,1474,1476],{"class":246,"line":750},[244,1473,490],{"class":250},[244,1475,271],{"class":254},[244,1477,496],{"class":495},[244,1479,1480],{"class":246,"line":756},[244,1481,501],{"class":277},[244,1483,1484],{"class":246,"line":762},[244,1485,1486],{"class":277},"        `players`.`id` AS `user.id`,\n",[244,1488,1489],{"class":246,"line":768},[244,1490,1491],{"class":277},"        CONCAT(`players`.`cid`, ':', `players`.`citizenid`) AS `user.identifier`,\n",[244,1493,1494],{"class":246,"line":774},[244,1495,1496],{"class":277},"        'user' AS `user.group`,\n",[244,1498,1499],{"class":246,"line":783},[244,1500,1501],{"class":277},"        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.firstname')) AS `user.firstname`,\n",[244,1503,1504],{"class":246,"line":788},[244,1505,1506],{"class":277},"        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.lastname')) AS `user.lastname`,\n",[244,1508,1509],{"class":246,"line":794},[244,1510,1511],{"class":277},"        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.birthdate')) AS `user.dateofbirth`,\n",[244,1513,1514],{"class":246,"line":800},[244,1515,1516],{"class":277},"        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.height')) AS `user.height`,\n",[244,1518,1519],{"class":246,"line":806},[244,1520,1521],{"class":277},"        JSON_UNQUOTE(JSON_EXTRACT(`players`.`job`, '$.name')) AS `user.job`,\n",[244,1523,1524],{"class":246,"line":812},[244,1525,1526],{"class":277},"        JSON_UNQUOTE(JSON_EXTRACT(`players`.`job`, '$.grade.level')) AS `user.job_grade`,\n",[244,1528,1529],{"class":246,"line":818},[244,1530,1531],{"class":277},"        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.gender')) AS `user.sex`,\n",[244,1533,1534],{"class":246,"line":824},[244,1535,518],{"class":277},[244,1537,1538],{"class":246,"line":830},[244,1539,1540],{"class":277},"        `players`\n",[244,1542,1543],{"class":246,"line":836},[244,1544,880],{"class":277},[244,1546,1547],{"class":246,"line":842},[244,1548,530],{"class":277},[244,1550,1551],{"class":246,"line":848},[244,1552,536],{"class":277},[244,1554,1555],{"class":246,"line":854},[244,1556,896],{"class":261},[244,1558,1559,1561,1563],{"class":246,"line":860},[244,1560,902],{"class":250},[244,1562,271],{"class":254},[244,1564,485],{"class":313},[244,1566,1567],{"class":246,"line":866},[244,1568,912],{"class":261},[244,1570,1571],{"class":246,"line":871},[244,1572,918],{"class":261},[244,1574,1575,1577],{"class":246,"line":877},[244,1576,924],{"class":250},[244,1578,255],{"class":254},[244,1580,1581,1583],{"class":246,"line":883},[244,1582,932],{"class":250},[244,1584,255],{"class":254},[244,1586,1587,1589,1591,1593,1595],{"class":246,"line":888},[244,1588,940],{"class":254},[244,1590,274],{"class":254},[244,1592,945],{"class":277},[244,1594,948],{"class":254},[244,1596,951],{"class":261},[244,1598,1599,1601,1603,1605,1607],{"class":246,"line":893},[244,1600,940],{"class":254},[244,1602,274],{"class":254},[244,1604,961],{"class":277},[244,1606,948],{"class":254},[244,1608,966],{"class":261},[244,1610,1611,1613,1615,1617,1619],{"class":246,"line":899},[244,1612,940],{"class":254},[244,1614,274],{"class":254},[244,1616,976],{"class":277},[244,1618,948],{"class":254},[244,1620,981],{"class":261},[244,1622,1623,1625,1627,1629,1631,1633],{"class":246,"line":909},[244,1624,987],{"class":250},[244,1626,271],{"class":254},[244,1628,274],{"class":254},[244,1630,976],{"class":277},[244,1632,948],{"class":254},[244,1634,998],{"class":261},[244,1636,1637,1639],{"class":246,"line":915},[244,1638,1004],{"class":250},[244,1640,255],{"class":254},[244,1642,1643,1645],{"class":246,"line":921},[244,1644,1024],{"class":250},[244,1646,255],{"class":254},[244,1648,1649,1651,1653,1655,1657],{"class":246,"line":929},[244,1650,1032],{"class":250},[244,1652,271],{"class":254},[244,1654,1037],{"class":254},[244,1656,1040],{"class":277},[244,1658,1043],{"class":254},[244,1660,1661,1663],{"class":246,"line":937},[244,1662,1049],{"class":250},[244,1664,255],{"class":254},[244,1666,1667,1669,1671,1673,1675,1677,1679],{"class":246,"line":954},[244,1668,1057],{"class":254},[244,1670,1060],{"class":277},[244,1672,1063],{"class":254},[244,1674,271],{"class":254},[244,1676,1037],{"class":254},[244,1678,1070],{"class":277},[244,1680,1043],{"class":254},[244,1682,1683,1685],{"class":246,"line":969},[244,1684,1078],{"class":250},[244,1686,255],{"class":254},[244,1688,1689],{"class":246,"line":984},[244,1690,1691],{"class":261},"    # Must return `type`, `owner` columns\n",[244,1693,1694,1696,1698],{"class":246,"line":1001},[244,1695,480],{"class":250},[244,1697,271],{"class":254},[244,1699,314],{"class":313},[244,1701,1702,1704,1706],{"class":246,"line":1009},[244,1703,490],{"class":250},[244,1705,271],{"class":254},[244,1707,496],{"class":495},[244,1709,1710],{"class":246,"line":1015},[244,1711,501],{"class":277},[244,1713,1714],{"class":246,"line":1021},[244,1715,1115],{"class":277},[244,1717,1718],{"class":246,"line":1029},[244,1719,1720],{"class":277},"        `user_licenses`.`owner` AS `user_license.owner`\n",[244,1722,1723],{"class":246,"line":1046},[244,1724,518],{"class":277},[244,1726,1727],{"class":246,"line":1054},[244,1728,1132],{"class":277},[244,1730,1731],{"class":246,"line":1075},[244,1732,624],{"class":277},[244,1734,1735],{"class":246,"line":1083},[244,1736,1143],{"class":277},[244,1738,1739],{"class":246,"line":1089},[244,1740,530],{"class":277},[244,1742,1743],{"class":246,"line":1098},[244,1744,536],{"class":277},[244,1746,1747,1749],{"class":246,"line":1107},[244,1748,1159],{"class":250},[244,1750,255],{"class":254},[244,1752,1753],{"class":246,"line":1112},[244,1754,1755],{"class":261},"    # Must return `owner_id` (DB User ID) or `owner_identifier`, `plate`, `type`, `model` columns\n",[244,1757,1758,1760,1762],{"class":246,"line":1118},[244,1759,480],{"class":250},[244,1761,271],{"class":254},[244,1763,485],{"class":313},[244,1765,1766,1768,1770],{"class":246,"line":1124},[244,1767,490],{"class":250},[244,1769,271],{"class":254},[244,1771,496],{"class":495},[244,1773,1774],{"class":246,"line":1129},[244,1775,501],{"class":277},[244,1777,1778],{"class":246,"line":1135},[244,1779,1780],{"class":277},"        IF(`player_vehicles`.job_vehicle=0, CONCAT(players.cid, ':', players.`citizenid`), NULL) AS `vehicle.owner_identifier`,\n",[244,1782,1783],{"class":246,"line":1140},[244,1784,1785],{"class":277},"        `player_vehicles`.`plate` AS `vehicle.plate`,\n",[244,1787,1788],{"class":246,"line":1146},[244,1789,1790],{"class":277},"        `player_vehicles`.`garage_type` AS `vehicle.type`,\n",[244,1792,1793],{"class":246,"line":1151},[244,1794,1795],{"class":277},"        `player_vehicles`.`vehicle` AS `vehicle.model`,\n",[244,1797,1798],{"class":246,"line":1156},[244,1799,1800],{"class":277},"        IF(`player_vehicles`.`job_vehicle`=1, `player_vehicles`.`citizenid`, NULL) AS `vehicle.job`\n",[244,1802,1803],{"class":246,"line":1164},[244,1804,518],{"class":277},[244,1806,1807],{"class":246,"line":1170},[244,1808,1809],{"class":277},"        `player_vehicles`\n",[244,1811,1812],{"class":246,"line":1179},[244,1813,1814],{"class":277},"        LEFT JOIN `players` ON (`players`.`citizenid` = `player_vehicles`.`citizenid`)\n",[244,1816,1817],{"class":246,"line":1188},[244,1818,530],{"class":277},[244,1820,1821],{"class":246,"line":1193},[244,1822,536],{"class":277},[1824,1825,1826],"style",{},"html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .sfNiH, html code.shiki .sfNiH{--shiki-light:#FF5370;--shiki-default:#FF9CAC;--shiki-dark:#FF9CAC}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}",{"title":240,"searchDepth":258,"depth":258,"links":1828},[1829,1832],{"id":207,"depth":258,"text":23,"children":1830},[1831],{"id":391,"depth":265,"text":392},{"id":441,"depth":258,"text":442,"children":1833},[1834,1835],{"id":445,"depth":265,"text":446},{"id":1238,"depth":265,"text":1239},"md",null,{},true,{"title":40,"description":179},"i7XK1e9rlSxMGz4DwboC47L-DHHivbhX5tRsV0lZYI0",[1843,1845],{"title":36,"path":37,"stem":38,"description":1844,"children":-1},"If you are using ESX and want to use your server's ESX tables directly, you can use the ESX Compatibility Mode option database.esxCompat: true.",{"title":44,"path":45,"stem":46,"description":240,"children":-1},1743788948332]