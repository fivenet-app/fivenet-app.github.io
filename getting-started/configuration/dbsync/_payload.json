[{"data":1,"prerenderedAt":1850},["ShallowReactive",2],{"navigation":3,"/getting-started/configuration/dbsync":175,"/getting-started/configuration/dbsync-surround":1846},[4,81,133,151],{"title":5,"path":6,"stem":7,"children":8},"Getting Started","/getting-started","1.getting-started/1.index",[9,10,14,18,22,52,56],{"title":5,"path":6,"stem":7},{"title":11,"path":12,"stem":13},"Requirements","/getting-started/requirements","1.getting-started/1.requirements",{"title":15,"path":16,"stem":17},"Features","/getting-started/features","1.getting-started/2.features",{"title":19,"path":20,"stem":21},"Components","/getting-started/components","1.getting-started/3.components",{"title":23,"path":24,"stem":25,"children":26,"page":51},"Configuration","/getting-started/configuration","1.getting-started/3.configuration",[27,31,35,39,43,47],{"title":28,"path":29,"stem":30},"Config File Reference","/getting-started/configuration/config-reference","1.getting-started/3.configuration/1.config-reference",{"title":32,"path":33,"stem":34},"Config Examples","/getting-started/configuration/config-examples","1.getting-started/3.configuration/2.config-examples",{"title":36,"path":37,"stem":38},"ESX Compatibility Mode","/getting-started/configuration/esx-compat-mode","1.getting-started/3.configuration/2.esx-compat-mode",{"title":40,"path":41,"stem":42},"DBSync","/getting-started/configuration/dbsync","1.getting-started/3.configuration/3.dbsync",{"title":44,"path":45,"stem":46},"Command Flags","/getting-started/configuration/flags","1.getting-started/3.configuration/5.flags",{"title":48,"path":49,"stem":50},"Database Basics","/getting-started/configuration/database-basics","1.getting-started/3.configuration/6.database-basics",false,{"title":53,"path":54,"stem":55},"Demo","/getting-started/demo","1.getting-started/4.demo",{"title":57,"path":58,"stem":59,"children":60,"page":51},"Installation","/getting-started/installation","1.getting-started/4.installation",[61,65,69,73,77],{"title":62,"path":63,"stem":64},"Methods","/getting-started/installation/methods","1.getting-started/4.installation/1.methods",{"title":66,"path":67,"stem":68},"Cloud","/getting-started/installation/cloud","1.getting-started/4.installation/2.cloud",{"title":70,"path":71,"stem":72},"Using Docker","/getting-started/installation/container-docker","1.getting-started/4.installation/3.container-docker",{"title":74,"path":75,"stem":76},"Kubernetes: Using Helm","/getting-started/installation/kubernetes-helm","1.getting-started/4.installation/4.kubernetes-helm",{"title":78,"path":79,"stem":80},"After Install Steps","/getting-started/installation/post-install-steps","1.getting-started/4.installation/6.post-install-steps",{"title":82,"path":83,"stem":84,"children":85},"User Guides","/user-guides","3.user-guides/0.index",[86,87,91,95,105,109,113,117,121,125,129],{"title":82,"path":83,"stem":84},{"title":88,"path":89,"stem":90},"Citizens","/user-guides/citizens","3.user-guides/1.citizens",{"title":92,"path":93,"stem":94},"Vehicles","/user-guides/vehicles","3.user-guides/2.vehicles",{"title":96,"path":97,"stem":98,"children":99},"Documents","/user-guides/documents","3.user-guides/3.documents/index",[100,101],{"title":96,"path":97,"stem":98},{"title":102,"path":103,"stem":104},"Templates","/user-guides/documents/templates","3.user-guides/3.documents/templates",{"title":106,"path":107,"stem":108},"Jobs","/user-guides/jobs","3.user-guides/3.jobs",{"title":110,"path":111,"stem":112},"Calendar","/user-guides/calendar","3.user-guides/4.calendar",{"title":114,"path":115,"stem":116},"Livemap","/user-guides/livemap","3.user-guides/5.livemap",{"title":118,"path":119,"stem":120},"Dispatch Center","/user-guides/centrum","3.user-guides/6.centrum",{"title":122,"path":123,"stem":124},"Mailer","/user-guides/mailer","3.user-guides/6.mailer",{"title":126,"path":127,"stem":128},"Settings","/user-guides/settings","3.user-guides/7.settings",{"title":130,"path":131,"stem":132},"Languages (i18n)","/user-guides/i18n","3.user-guides/8.i18n",{"title":134,"path":135,"stem":136,"children":137},"Development","/development","8.development/1.index",[138,139,143,147],{"title":134,"path":135,"stem":136},{"title":140,"path":141,"stem":142},"Protocol Documentation","/development/grpc-api","8.development/3.grpc-api",{"title":144,"path":145,"stem":146},"Release Process","/development/release","8.development/4.release",{"title":148,"path":149,"stem":150},"User Activity","/development/user-activity","8.development/5.user-activity",{"title":152,"path":153,"stem":154,"children":155,"page":51},"Design Docs","/design","9.design",[156,160,163,167,171],{"title":157,"path":158,"stem":159},"DB Sync","/design/db-sync","9.design/db-sync",{"title":118,"path":161,"stem":162},"/design/dispatch-center","9.design/dispatch-center",{"title":164,"path":165,"stem":166},"Employee Management","/design/employee-management","9.design/employee-management",{"title":168,"path":169,"stem":170},"Player Tracker Rework","/design/player-tracker-rework","9.design/player-tracker-rework",{"title":172,"path":173,"stem":174},"Qualifications","/design/qualifications","9.design/qualifications",{"id":176,"title":40,"body":177,"description":183,"extension":1840,"links":1841,"meta":1842,"navigation":1843,"path":41,"seo":1844,"stem":42,"__hash__":1845},"docs/1.getting-started/3.configuration/3.dbsync.md",{"type":178,"value":179,"toc":1831},"minimal",[180,184,187,208,212,224,231,238,336,342,383,389,392,397,415,443,447,451,1240,1244,1827],[181,182,183],"p",{},"The DBSync is used to sync character/player, vehicles, and other data to your FiveNet instance.",[181,185,186],{},"Reasons why you would use the DBSync are:",[188,189,190,199,202,205],"ul",{},[191,192,193,194,198],"li",{},"You are ",[195,196,197],"strong",{},"not"," using the FiveM ESX framework.",[191,200,201],{},"To run FiveNet in \"standalone\" mode independent of the gameserver.",[191,203,204],{},"You would not be able to make the gameserver's database server reachable by FiveNet (e.g., restricted gameserver hosting, firewalls you can't change).",[191,206,207],{},"You are using the FiveNet Cloud offering.",[209,210,23],"h2",{"id":211},"configuration",[181,213,214,215,219,220,223],{},"The configuration file for the DBSync by default is called ",[216,217,218],"code",{},"dbsync.yaml",".\nThe DBSync process stores the \"sync state\" in a file called ",[216,221,222],{},"dbsync.state.yaml"," by default. This file is used to keep track of the last synced data, it should persisted as to not cause the DBSync to re-sync everything again.",[181,225,226,227,230],{},"To get started make sure that you have enabled the sync and configured a sync API token in your FiveNet's ",[216,228,229],{},"config.yaml"," file.",[181,232,233,234,237],{},"The ",[216,235,236],{},"destination:"," section is where you need to configure the URL to your FiveNet instance, example:",[239,240,245],"pre",{"className":241,"code":242,"language":243,"meta":244,"style":244},"language-yaml shiki shiki-themes material-theme-lighter material-theme material-theme-palenight","destination:\n  # Host + port to your FiveNet instance (requires HTTPS/valid TLS certs, unless insecure is set to `true`)\n  url: \"fivenet.example.com\"\n  token: \"YOUR_SYNC_API_TOKEN\"\n  # Disable TLS verification (not recommended)\n  insecure: false\n  # Sync Interval can also be specified per table in the `tables:` section\n  syncInterval: 5s\n","yaml","",[216,246,247,260,267,286,301,307,319,325],{"__ignoreMap":244},[248,249,252,256],"span",{"class":250,"line":251},"line",1,[248,253,255],{"class":254},"swJcz","destination",[248,257,259],{"class":258},"sMK4o",":\n",[248,261,263],{"class":250,"line":262},2,[248,264,266],{"class":265},"sHwdD","  # Host + port to your FiveNet instance (requires HTTPS/valid TLS certs, unless insecure is set to `true`)\n",[248,268,270,273,276,279,283],{"class":250,"line":269},3,[248,271,272],{"class":254},"  url",[248,274,275],{"class":258},":",[248,277,278],{"class":258}," \"",[248,280,282],{"class":281},"sfazB","fivenet.example.com",[248,284,285],{"class":258},"\"\n",[248,287,289,292,294,296,299],{"class":250,"line":288},4,[248,290,291],{"class":254},"  token",[248,293,275],{"class":258},[248,295,278],{"class":258},[248,297,298],{"class":281},"YOUR_SYNC_API_TOKEN",[248,300,285],{"class":258},[248,302,304],{"class":250,"line":303},5,[248,305,306],{"class":265},"  # Disable TLS verification (not recommended)\n",[248,308,310,313,315],{"class":250,"line":309},6,[248,311,312],{"class":254},"  insecure",[248,314,275],{"class":258},[248,316,318],{"class":317},"sfNiH"," false\n",[248,320,322],{"class":250,"line":321},7,[248,323,324],{"class":265},"  # Sync Interval can also be specified per table in the `tables:` section\n",[248,326,328,331,333],{"class":250,"line":327},8,[248,329,330],{"class":254},"  syncInterval",[248,332,275],{"class":258},[248,334,335],{"class":281}," 5s\n",[181,337,233,338,341],{},[216,339,340],{},"source:"," section holds the database connection details of your gameserver database which holds the tables you want to sync to FiveNet.",[239,343,345],{"className":241,"code":344,"language":243,"meta":244,"style":244},"# Changes to the source require a restart of the dbsync\nsource:\n  # Refer to https://github.com/go-sql-driver/mysql#dsn-data-source-name for details\n  # Please note that the `parseTime` parameter is allows set to true\n  dsn: \"DB_USER:DB_PASS@tcp(DB_HOST:DB_PORT)/DB_NAME?collation=utf8mb4_unicode_ci&loc=Europe%2FBerlin\"\n",[216,346,347,352,359,364,369],{"__ignoreMap":244},[248,348,349],{"class":250,"line":251},[248,350,351],{"class":265},"# Changes to the source require a restart of the dbsync\n",[248,353,354,357],{"class":250,"line":262},[248,355,356],{"class":254},"source",[248,358,259],{"class":258},[248,360,361],{"class":250,"line":269},[248,362,363],{"class":265},"  # Refer to https://github.com/go-sql-driver/mysql#dsn-data-source-name for details\n",[248,365,366],{"class":250,"line":288},[248,367,368],{"class":265},"  # Please note that the `parseTime` parameter is allows set to true\n",[248,370,371,374,376,378,381],{"class":250,"line":303},[248,372,373],{"class":254},"  dsn",[248,375,275],{"class":258},[248,377,278],{"class":258},[248,379,380],{"class":281},"DB_USER:DB_PASS@tcp(DB_HOST:DB_PORT)/DB_NAME?collation=utf8mb4_unicode_ci&loc=Europe%2FBerlin",[248,382,285],{"class":258},[181,384,233,385,388],{},[216,386,387],{},"tables:"," section is used to configure the queries for the tables you want to sync to FiveNet.\nPlease see the examples below for the ESX and QBCore frameworks.",[181,390,391],{},"Should you be using another framework, you will need to adjust the queries accordingly.",[393,394,396],"h3",{"id":395},"table-queries","Table Queries",[181,398,399,400,403,404,407,408,407,411,414],{},"The queries for the tables must return the columns in the format specified per table, e.g., to return user info the format must be ",[216,401,402],{},"user.COLUMN"," (e.g., ",[216,405,406],{},"user.id",", ",[216,409,410],{},"user.firstname",[216,412,413],{},"user.lastname",").",[181,416,417,418,421,422,425,426,428,429,431,432,421,435,438,439,442],{},"An important point to note is that it is especially important to return a consistent ",[216,419,420],{},"id"," and ",[216,423,424],{},"identifier"," field for the users/characters.\nThe ",[216,427,420],{}," field is used to identify the user in the database, and the ",[216,430,424],{}," field is used to identify the user in FiveNet.\nIn addition to being used to \"bind\" multiple users/chars to one account, e.g., identifier ",[216,433,434],{},"char1:LICENSE",[216,436,437],{},"char2:LICENSE"," and the account only has the ",[216,440,441],{},"LICENSE"," set on it.",[209,444,446],{"id":445},"example-configs","Example Configs",[393,448,450],{"id":449},"esx-framework","ESX Framework",[239,452,454],{"className":241,"code":453,"language":243,"meta":244,"style":244},"tables:\n  # The example queries here are for the ESX framework\n  jobs:\n    # Must return `job.name`, `job.label` columns\n    enabled: true\n    query: |\n      SELECT\n        `jobs`.`name` AS `job.name`,\n        `jobs`.`label` AS `job.label`\n      FROM\n        `jobs`\n      LIMIT $limit\n      OFFSET $offset;\n  jobGrades:\n    # Must return `job_grade.job_name`, `job_grade.grade`, `job_grade.label` columns (with condition for the `job_name`)\n    enabled: true\n    query:\n      SELECT\n        `job_grades`.`job_name` AS `job_grade.job_name`,\n        `job_grades`.`grade` AS `job_grade.grade`,\n        `job_grades`.`name` AS `job_grade.name`,\n        `job_grades`.`label` AS `job_grade.label`\n      FROM\n        `job_grades`\n      WHERE\n        `job_grades.job_name` = $jobName\n      LIMIT $limit\n      OFFSET $offset;\n  licenses:\n    # Must return `type`, `label` columns\n    enabled: true\n    query: |\n      SELECT\n        `license.type`,\n        `license.label`\n      FROM\n        `licenses`\n      LIMIT $limit\n      OFFSET $offset;\n  users:\n    # Must return `user.id`, `user.identifier`, `user.group`, `user.firstname`, `user.lastname`, `user.dateofbirth`, `user.job`, `user.job_grade`, `user.sex`, `user.phone_number` columns\n    # Optional columns: `user.height`, `user.visum`, `user.playtime`\n    enabled: true\n    # If your \"players\"/\"users\" data has a timestamp/datetime column that is updated on update,\n    # configure it here so that after the initial sync only the changed data is synced again.\n    #updatedTimeColumn: \"last_seen\"\n    # The identifier column should be a smart combination of values when using a multichar system.\n    # E.g., it is prefered to use a ESX like identifier layout for that case `charX:LICENSE`\n    query: |\n      SELECT\n        `users`.`id` AS `user.id`,\n        `users`.`identifier` AS `user.identifier`,\n        `users`.`group` AS `user.group`,\n        `users`.`firstname` AS `user.firstname`,\n        `users`.`lastname` AS `user.lastname`,\n        `users`.`dateofbirth` AS `user.dateofbirth`,\n        `users`.`job` AS `user.job`,\n        `users`.`job_grade` AS `user.job_grade`,\n        `users`.`sex` AS `user.sex`,\n        `users`.`phone_number` AS `user.phone_number`,\n        `users`.`height` AS `user.height`,\n        `users`.`visum` AS `user.visum`,\n        `users`.`playtime` AS `user.playtime`\n      FROM\n        `users`\n      $whereCondition\n      LIMIT $limit\n      OFFSET $offset;\n    # If a lastname is not returned by the query, attempt to split the firstname into \"two\" parts\n    splitName: true\n    # Normalize date of birth value to the output format if possible\n    # Please see the Go `time` pkg documentation on potential date format layouts: https://pkg.go.dev/time#Layout\n    dateOfBirth:\n      formats:\n        - \"2006-01-02\" # 2000-10-18 = YYYY-MM-DD\n        - \"02/01/2006\" # 09/06/1993 = MM/DD/YYYY\n        - \"02.01.2006\" # 01.08.1982 = DD.MM.YYYY\n      outputFormat: \"02.01.2006\" # DD.MM.YYYY\n    valueMapping:\n      # This allows to map values to different values for FiveNet\n      # E.g., the sex of a char must be either `m`, `f`, or `d`\n      sex:\n        fallback: 'm'\n        values:\n          '1': 'f'\n  userLicenses:\n    # Must return `user_license.type`, `user_license.owner` columns\n    enabled: true\n    query: |\n      SELECT\n        `user_licenses`.`type` AS `user_license.type`,\n        `user_licenses`.`owner AS `user_license.owner``\n      FROM\n        `user_licenses`\n      WHERE\n        `owner` = $identifier\n      LIMIT $limit\n      OFFSET $offset;\n  vehicles:\n    # Must return `vehicle.owner_id` or `vehicle.owner_identifier`, `vehicle.plate`, `vehicle.type`, `vehicle.model` columns\n    enabled: true\n    query: |\n      SELECT\n        `owned_vehicles`.`owner` AS `vehicle.owner_identifier`,\n        `owned_vehicles`.`plate` AS `vehicle.plate`,\n        `owned_vehicles`.`type` AS `vehicle.type`,\n        `owned_vehicles`.`model` AS `vehicle.model`\n      FROM\n        `owned_vehicles`\n      LIMIT $limit\n      OFFSET $offset;\n",[216,455,456,463,468,475,480,490,501,506,511,517,523,529,535,541,549,555,564,571,576,586,594,602,610,615,623,629,637,642,647,655,661,670,679,684,690,696,701,707,712,717,725,731,737,746,752,758,764,770,776,785,790,796,802,808,814,820,826,832,838,844,850,856,862,868,873,879,885,890,895,901,911,917,923,931,939,956,971,986,1003,1011,1017,1023,1031,1048,1056,1077,1085,1091,1100,1109,1114,1120,1126,1131,1137,1142,1148,1153,1158,1166,1172,1181,1190,1195,1201,1207,1213,1219,1224,1230,1235],{"__ignoreMap":244},[248,457,458,461],{"class":250,"line":251},[248,459,460],{"class":254},"tables",[248,462,259],{"class":258},[248,464,465],{"class":250,"line":262},[248,466,467],{"class":265},"  # The example queries here are for the ESX framework\n",[248,469,470,473],{"class":250,"line":269},[248,471,472],{"class":254},"  jobs",[248,474,259],{"class":258},[248,476,477],{"class":250,"line":288},[248,478,479],{"class":265},"    # Must return `job.name`, `job.label` columns\n",[248,481,482,485,487],{"class":250,"line":303},[248,483,484],{"class":254},"    enabled",[248,486,275],{"class":258},[248,488,489],{"class":317}," true\n",[248,491,492,495,497],{"class":250,"line":309},[248,493,494],{"class":254},"    query",[248,496,275],{"class":258},[248,498,500],{"class":499},"s7zQu"," |\n",[248,502,503],{"class":250,"line":321},[248,504,505],{"class":281},"      SELECT\n",[248,507,508],{"class":250,"line":327},[248,509,510],{"class":281},"        `jobs`.`name` AS `job.name`,\n",[248,512,514],{"class":250,"line":513},9,[248,515,516],{"class":281},"        `jobs`.`label` AS `job.label`\n",[248,518,520],{"class":250,"line":519},10,[248,521,522],{"class":281},"      FROM\n",[248,524,526],{"class":250,"line":525},11,[248,527,528],{"class":281},"        `jobs`\n",[248,530,532],{"class":250,"line":531},12,[248,533,534],{"class":281},"      LIMIT $limit\n",[248,536,538],{"class":250,"line":537},13,[248,539,540],{"class":281},"      OFFSET $offset;\n",[248,542,544,547],{"class":250,"line":543},14,[248,545,546],{"class":254},"  jobGrades",[248,548,259],{"class":258},[248,550,552],{"class":250,"line":551},15,[248,553,554],{"class":265},"    # Must return `job_grade.job_name`, `job_grade.grade`, `job_grade.label` columns (with condition for the `job_name`)\n",[248,556,558,560,562],{"class":250,"line":557},16,[248,559,484],{"class":254},[248,561,275],{"class":258},[248,563,489],{"class":317},[248,565,567,569],{"class":250,"line":566},17,[248,568,494],{"class":254},[248,570,259],{"class":258},[248,572,574],{"class":250,"line":573},18,[248,575,505],{"class":281},[248,577,579,583],{"class":250,"line":578},19,[248,580,582],{"class":581},"sTEyZ","        `",[248,584,585],{"class":281},"job_grades`.`job_name` AS `job_grade.job_name`,\n",[248,587,589,591],{"class":250,"line":588},20,[248,590,582],{"class":581},[248,592,593],{"class":281},"job_grades`.`grade` AS `job_grade.grade`,\n",[248,595,597,599],{"class":250,"line":596},21,[248,598,582],{"class":581},[248,600,601],{"class":281},"job_grades`.`name` AS `job_grade.name`,\n",[248,603,605,607],{"class":250,"line":604},22,[248,606,582],{"class":581},[248,608,609],{"class":281},"job_grades`.`label` AS `job_grade.label`\n",[248,611,613],{"class":250,"line":612},23,[248,614,522],{"class":281},[248,616,618,620],{"class":250,"line":617},24,[248,619,582],{"class":581},[248,621,622],{"class":281},"job_grades`\n",[248,624,626],{"class":250,"line":625},25,[248,627,628],{"class":281},"      WHERE\n",[248,630,632,634],{"class":250,"line":631},26,[248,633,582],{"class":581},[248,635,636],{"class":281},"job_grades.job_name` = $jobName\n",[248,638,640],{"class":250,"line":639},27,[248,641,534],{"class":281},[248,643,645],{"class":250,"line":644},28,[248,646,540],{"class":281},[248,648,650,653],{"class":250,"line":649},29,[248,651,652],{"class":254},"  licenses",[248,654,259],{"class":258},[248,656,658],{"class":250,"line":657},30,[248,659,660],{"class":265},"    # Must return `type`, `label` columns\n",[248,662,664,666,668],{"class":250,"line":663},31,[248,665,484],{"class":254},[248,667,275],{"class":258},[248,669,489],{"class":317},[248,671,673,675,677],{"class":250,"line":672},32,[248,674,494],{"class":254},[248,676,275],{"class":258},[248,678,500],{"class":499},[248,680,682],{"class":250,"line":681},33,[248,683,505],{"class":281},[248,685,687],{"class":250,"line":686},34,[248,688,689],{"class":281},"        `license.type`,\n",[248,691,693],{"class":250,"line":692},35,[248,694,695],{"class":281},"        `license.label`\n",[248,697,699],{"class":250,"line":698},36,[248,700,522],{"class":281},[248,702,704],{"class":250,"line":703},37,[248,705,706],{"class":281},"        `licenses`\n",[248,708,710],{"class":250,"line":709},38,[248,711,534],{"class":281},[248,713,715],{"class":250,"line":714},39,[248,716,540],{"class":281},[248,718,720,723],{"class":250,"line":719},40,[248,721,722],{"class":254},"  users",[248,724,259],{"class":258},[248,726,728],{"class":250,"line":727},41,[248,729,730],{"class":265},"    # Must return `user.id`, `user.identifier`, `user.group`, `user.firstname`, `user.lastname`, `user.dateofbirth`, `user.job`, `user.job_grade`, `user.sex`, `user.phone_number` columns\n",[248,732,734],{"class":250,"line":733},42,[248,735,736],{"class":265},"    # Optional columns: `user.height`, `user.visum`, `user.playtime`\n",[248,738,740,742,744],{"class":250,"line":739},43,[248,741,484],{"class":254},[248,743,275],{"class":258},[248,745,489],{"class":317},[248,747,749],{"class":250,"line":748},44,[248,750,751],{"class":265},"    # If your \"players\"/\"users\" data has a timestamp/datetime column that is updated on update,\n",[248,753,755],{"class":250,"line":754},45,[248,756,757],{"class":265},"    # configure it here so that after the initial sync only the changed data is synced again.\n",[248,759,761],{"class":250,"line":760},46,[248,762,763],{"class":265},"    #updatedTimeColumn: \"last_seen\"\n",[248,765,767],{"class":250,"line":766},47,[248,768,769],{"class":265},"    # The identifier column should be a smart combination of values when using a multichar system.\n",[248,771,773],{"class":250,"line":772},48,[248,774,775],{"class":265},"    # E.g., it is prefered to use a ESX like identifier layout for that case `charX:LICENSE`\n",[248,777,779,781,783],{"class":250,"line":778},49,[248,780,494],{"class":254},[248,782,275],{"class":258},[248,784,500],{"class":499},[248,786,788],{"class":250,"line":787},50,[248,789,505],{"class":281},[248,791,793],{"class":250,"line":792},51,[248,794,795],{"class":281},"        `users`.`id` AS `user.id`,\n",[248,797,799],{"class":250,"line":798},52,[248,800,801],{"class":281},"        `users`.`identifier` AS `user.identifier`,\n",[248,803,805],{"class":250,"line":804},53,[248,806,807],{"class":281},"        `users`.`group` AS `user.group`,\n",[248,809,811],{"class":250,"line":810},54,[248,812,813],{"class":281},"        `users`.`firstname` AS `user.firstname`,\n",[248,815,817],{"class":250,"line":816},55,[248,818,819],{"class":281},"        `users`.`lastname` AS `user.lastname`,\n",[248,821,823],{"class":250,"line":822},56,[248,824,825],{"class":281},"        `users`.`dateofbirth` AS `user.dateofbirth`,\n",[248,827,829],{"class":250,"line":828},57,[248,830,831],{"class":281},"        `users`.`job` AS `user.job`,\n",[248,833,835],{"class":250,"line":834},58,[248,836,837],{"class":281},"        `users`.`job_grade` AS `user.job_grade`,\n",[248,839,841],{"class":250,"line":840},59,[248,842,843],{"class":281},"        `users`.`sex` AS `user.sex`,\n",[248,845,847],{"class":250,"line":846},60,[248,848,849],{"class":281},"        `users`.`phone_number` AS `user.phone_number`,\n",[248,851,853],{"class":250,"line":852},61,[248,854,855],{"class":281},"        `users`.`height` AS `user.height`,\n",[248,857,859],{"class":250,"line":858},62,[248,860,861],{"class":281},"        `users`.`visum` AS `user.visum`,\n",[248,863,865],{"class":250,"line":864},63,[248,866,867],{"class":281},"        `users`.`playtime` AS `user.playtime`\n",[248,869,871],{"class":250,"line":870},64,[248,872,522],{"class":281},[248,874,876],{"class":250,"line":875},65,[248,877,878],{"class":281},"        `users`\n",[248,880,882],{"class":250,"line":881},66,[248,883,884],{"class":281},"      $whereCondition\n",[248,886,888],{"class":250,"line":887},67,[248,889,534],{"class":281},[248,891,893],{"class":250,"line":892},68,[248,894,540],{"class":281},[248,896,898],{"class":250,"line":897},69,[248,899,900],{"class":265},"    # If a lastname is not returned by the query, attempt to split the firstname into \"two\" parts\n",[248,902,904,907,909],{"class":250,"line":903},70,[248,905,906],{"class":254},"    splitName",[248,908,275],{"class":258},[248,910,489],{"class":317},[248,912,914],{"class":250,"line":913},71,[248,915,916],{"class":265},"    # Normalize date of birth value to the output format if possible\n",[248,918,920],{"class":250,"line":919},72,[248,921,922],{"class":265},"    # Please see the Go `time` pkg documentation on potential date format layouts: https://pkg.go.dev/time#Layout\n",[248,924,926,929],{"class":250,"line":925},73,[248,927,928],{"class":254},"    dateOfBirth",[248,930,259],{"class":258},[248,932,934,937],{"class":250,"line":933},74,[248,935,936],{"class":254},"      formats",[248,938,259],{"class":258},[248,940,942,945,947,950,953],{"class":250,"line":941},75,[248,943,944],{"class":258},"        -",[248,946,278],{"class":258},[248,948,949],{"class":281},"2006-01-02",[248,951,952],{"class":258},"\"",[248,954,955],{"class":265}," # 2000-10-18 = YYYY-MM-DD\n",[248,957,959,961,963,966,968],{"class":250,"line":958},76,[248,960,944],{"class":258},[248,962,278],{"class":258},[248,964,965],{"class":281},"02/01/2006",[248,967,952],{"class":258},[248,969,970],{"class":265}," # 09/06/1993 = MM/DD/YYYY\n",[248,972,974,976,978,981,983],{"class":250,"line":973},77,[248,975,944],{"class":258},[248,977,278],{"class":258},[248,979,980],{"class":281},"02.01.2006",[248,982,952],{"class":258},[248,984,985],{"class":265}," # 01.08.1982 = DD.MM.YYYY\n",[248,987,989,992,994,996,998,1000],{"class":250,"line":988},78,[248,990,991],{"class":254},"      outputFormat",[248,993,275],{"class":258},[248,995,278],{"class":258},[248,997,980],{"class":281},[248,999,952],{"class":258},[248,1001,1002],{"class":265}," # DD.MM.YYYY\n",[248,1004,1006,1009],{"class":250,"line":1005},79,[248,1007,1008],{"class":254},"    valueMapping",[248,1010,259],{"class":258},[248,1012,1014],{"class":250,"line":1013},80,[248,1015,1016],{"class":265},"      # This allows to map values to different values for FiveNet\n",[248,1018,1020],{"class":250,"line":1019},81,[248,1021,1022],{"class":265},"      # E.g., the sex of a char must be either `m`, `f`, or `d`\n",[248,1024,1026,1029],{"class":250,"line":1025},82,[248,1027,1028],{"class":254},"      sex",[248,1030,259],{"class":258},[248,1032,1034,1037,1039,1042,1045],{"class":250,"line":1033},83,[248,1035,1036],{"class":254},"        fallback",[248,1038,275],{"class":258},[248,1040,1041],{"class":258}," '",[248,1043,1044],{"class":281},"m",[248,1046,1047],{"class":258},"'\n",[248,1049,1051,1054],{"class":250,"line":1050},84,[248,1052,1053],{"class":254},"        values",[248,1055,259],{"class":258},[248,1057,1059,1062,1065,1068,1070,1072,1075],{"class":250,"line":1058},85,[248,1060,1061],{"class":258},"          '",[248,1063,1064],{"class":281},"1",[248,1066,1067],{"class":258},"'",[248,1069,275],{"class":258},[248,1071,1041],{"class":258},[248,1073,1074],{"class":281},"f",[248,1076,1047],{"class":258},[248,1078,1080,1083],{"class":250,"line":1079},86,[248,1081,1082],{"class":254},"  userLicenses",[248,1084,259],{"class":258},[248,1086,1088],{"class":250,"line":1087},87,[248,1089,1090],{"class":265},"    # Must return `user_license.type`, `user_license.owner` columns\n",[248,1092,1094,1096,1098],{"class":250,"line":1093},88,[248,1095,484],{"class":254},[248,1097,275],{"class":258},[248,1099,489],{"class":317},[248,1101,1103,1105,1107],{"class":250,"line":1102},89,[248,1104,494],{"class":254},[248,1106,275],{"class":258},[248,1108,500],{"class":499},[248,1110,1112],{"class":250,"line":1111},90,[248,1113,505],{"class":281},[248,1115,1117],{"class":250,"line":1116},91,[248,1118,1119],{"class":281},"        `user_licenses`.`type` AS `user_license.type`,\n",[248,1121,1123],{"class":250,"line":1122},92,[248,1124,1125],{"class":281},"        `user_licenses`.`owner AS `user_license.owner``\n",[248,1127,1129],{"class":250,"line":1128},93,[248,1130,522],{"class":281},[248,1132,1134],{"class":250,"line":1133},94,[248,1135,1136],{"class":281},"        `user_licenses`\n",[248,1138,1140],{"class":250,"line":1139},95,[248,1141,628],{"class":281},[248,1143,1145],{"class":250,"line":1144},96,[248,1146,1147],{"class":281},"        `owner` = $identifier\n",[248,1149,1151],{"class":250,"line":1150},97,[248,1152,534],{"class":281},[248,1154,1156],{"class":250,"line":1155},98,[248,1157,540],{"class":281},[248,1159,1161,1164],{"class":250,"line":1160},99,[248,1162,1163],{"class":254},"  vehicles",[248,1165,259],{"class":258},[248,1167,1169],{"class":250,"line":1168},100,[248,1170,1171],{"class":265},"    # Must return `vehicle.owner_id` or `vehicle.owner_identifier`, `vehicle.plate`, `vehicle.type`, `vehicle.model` columns\n",[248,1173,1175,1177,1179],{"class":250,"line":1174},101,[248,1176,484],{"class":254},[248,1178,275],{"class":258},[248,1180,489],{"class":317},[248,1182,1184,1186,1188],{"class":250,"line":1183},102,[248,1185,494],{"class":254},[248,1187,275],{"class":258},[248,1189,500],{"class":499},[248,1191,1193],{"class":250,"line":1192},103,[248,1194,505],{"class":281},[248,1196,1198],{"class":250,"line":1197},104,[248,1199,1200],{"class":281},"        `owned_vehicles`.`owner` AS `vehicle.owner_identifier`,\n",[248,1202,1204],{"class":250,"line":1203},105,[248,1205,1206],{"class":281},"        `owned_vehicles`.`plate` AS `vehicle.plate`,\n",[248,1208,1210],{"class":250,"line":1209},106,[248,1211,1212],{"class":281},"        `owned_vehicles`.`type` AS `vehicle.type`,\n",[248,1214,1216],{"class":250,"line":1215},107,[248,1217,1218],{"class":281},"        `owned_vehicles`.`model` AS `vehicle.model`\n",[248,1220,1222],{"class":250,"line":1221},108,[248,1223,522],{"class":281},[248,1225,1227],{"class":250,"line":1226},109,[248,1228,1229],{"class":281},"        `owned_vehicles`\n",[248,1231,1233],{"class":250,"line":1232},110,[248,1234,534],{"class":281},[248,1236,1238],{"class":250,"line":1237},111,[248,1239,540],{"class":281},[393,1241,1243],{"id":1242},"qbcore-framework","QBCore Framework",[239,1245,1247],{"className":241,"code":1246,"language":243,"meta":244,"style":244},"tables:\n  jobs:\n    # Must return `name`, `label` columns\n    enabled: false\n    query: |\n      SELECT\n        `jobs`.`name` AS `job.name`,\n        `jobs`.`label` AS `job.label`\n      FROM\n        `jobs`\n      LIMIT $limit\n      OFFSET $offset;\n  jobGrades:\n    # Must return `job_name`, `grade`, `label` columns (with condition for the `job_name` (`$jobName`))\n    enabled: false\n    query: |\n      SELECT\n        `job_grades`.`job_name` AS `job_grade.job_name`,\n        `job_grades`.`grade` AS `job_grade.grade`,\n        `job_grades`.`label` AS `job_grade.label`\n      FROM\n        `job_grades`\n      WHERE\n        `job_name` = $jobName\n      LIMIT $limit\n      OFFSET $offset;\n  licenses:\n    # Must return `type`, `label` columns\n    enabled: false\n    query: |\n      SELECT\n        `licenses`.`type` AS `license.type`,\n        `licenses`.`label` AS `license.label`\n      FROM\n        `licenses`\n      LIMIT $limit\n      OFFSET $offset;\n  users:\n    # Must return `id`, `identifier`, `group`, `firstname`, `lastname`, `dateofbirth`, `job`, `job_grade`, `sex`, `phone_number` columns\n    # Optional `height`, `visum`, `playtime` columns\n    enabled: false\n    #updatedTimeColumn: \"last_seen\"\n    # The identifier column should be a smart combination of values when using a multichar system.\n    # E.g., it is prefered to use a ESX like identifier layout for that case `charX:LICENSE`\n    query: |\n      SELECT\n        `players`.`id` AS `user.id`,\n        CONCAT(`players`.`cid`, ':', `players`.`citizenid`) AS `user.identifier`,\n        'user' AS `user.group`,\n        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.firstname')) AS `user.firstname`,\n        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.lastname')) AS `user.lastname`,\n        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.birthdate')) AS `user.dateofbirth`,\n        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.height')) AS `user.height`,\n        JSON_UNQUOTE(JSON_EXTRACT(`players`.`job`, '$.name')) AS `user.job`,\n        JSON_UNQUOTE(JSON_EXTRACT(`players`.`job`, '$.grade.level')) AS `user.job_grade`,\n        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.gender')) AS `user.sex`,\n      FROM\n        `players`\n      $whereCondition\n      LIMIT $limit\n      OFFSET $offset;\n    # If a lastname is not returned by the query, attempt to split the firstname into \"two\" parts\n    splitName: true\n    # Normalize date of birth value to the output format if possible\n    # Please see the Go `time` pkg documentation on potential date format layouts: https://pkg.go.dev/time#Layout\n    dateOfBirth:\n      formats:\n        - \"2006-01-02\" # 2000-10-18 = YYYY-MM-DD\n        - \"02/01/2006\" # 09/06/1993 = MM/DD/YYYY\n        - \"02.01.2006\" # 01.08.1982 = DD.MM.YYYY\n      outputFormat: \"02.01.2006\" # DD.MM.YYYY\n    valueMapping:\n      sex:\n        fallback: 'm'\n        values:\n          '1': 'f'\n  userLicenses:\n    # Must return `type`, `owner` columns\n    enabled: false\n    query: |\n      SELECT\n        `user_licenses`.`type` AS `user_license.type`,\n        `user_licenses`.`owner` AS `user_license.owner`\n      FROM\n        `user_licenses`\n      WHERE\n        `owner` = $identifier\n      LIMIT $limit\n      OFFSET $offset;\n  vehicles:\n    # Must return `owner_id` (DB User ID) or `owner_identifier`, `plate`, `type`, `model` columns\n    enabled: true\n    query: |\n      SELECT\n        IF(`player_vehicles`.job_vehicle=0, CONCAT(players.cid, ':', players.`citizenid`), NULL) AS `vehicle.owner_identifier`,\n        `player_vehicles`.`plate` AS `vehicle.plate`,\n        `player_vehicles`.`garage_type` AS `vehicle.type`,\n        `player_vehicles`.`vehicle` AS `vehicle.model`,\n        IF(`player_vehicles`.`job_vehicle`=1, `player_vehicles`.`citizenid`, NULL) AS `vehicle.job`\n      FROM\n        `player_vehicles`\n        LEFT JOIN `players` ON (`players`.`citizenid` = `player_vehicles`.`citizenid`)\n      LIMIT $limit\n      OFFSET $offset;\n",[216,1248,1249,1255,1261,1266,1274,1282,1286,1290,1294,1298,1302,1306,1310,1316,1321,1329,1337,1341,1346,1351,1356,1360,1365,1369,1374,1378,1382,1388,1392,1400,1408,1412,1417,1422,1426,1430,1434,1438,1444,1449,1454,1462,1466,1470,1474,1482,1486,1491,1496,1501,1506,1511,1516,1521,1526,1531,1536,1540,1545,1549,1553,1557,1561,1569,1573,1577,1583,1589,1601,1613,1625,1639,1645,1651,1663,1669,1685,1691,1696,1704,1712,1716,1720,1725,1729,1733,1737,1741,1745,1749,1755,1760,1768,1776,1780,1785,1790,1795,1800,1805,1809,1814,1819,1823],{"__ignoreMap":244},[248,1250,1251,1253],{"class":250,"line":251},[248,1252,460],{"class":254},[248,1254,259],{"class":258},[248,1256,1257,1259],{"class":250,"line":262},[248,1258,472],{"class":254},[248,1260,259],{"class":258},[248,1262,1263],{"class":250,"line":269},[248,1264,1265],{"class":265},"    # Must return `name`, `label` columns\n",[248,1267,1268,1270,1272],{"class":250,"line":288},[248,1269,484],{"class":254},[248,1271,275],{"class":258},[248,1273,318],{"class":317},[248,1275,1276,1278,1280],{"class":250,"line":303},[248,1277,494],{"class":254},[248,1279,275],{"class":258},[248,1281,500],{"class":499},[248,1283,1284],{"class":250,"line":309},[248,1285,505],{"class":281},[248,1287,1288],{"class":250,"line":321},[248,1289,510],{"class":281},[248,1291,1292],{"class":250,"line":327},[248,1293,516],{"class":281},[248,1295,1296],{"class":250,"line":513},[248,1297,522],{"class":281},[248,1299,1300],{"class":250,"line":519},[248,1301,528],{"class":281},[248,1303,1304],{"class":250,"line":525},[248,1305,534],{"class":281},[248,1307,1308],{"class":250,"line":531},[248,1309,540],{"class":281},[248,1311,1312,1314],{"class":250,"line":537},[248,1313,546],{"class":254},[248,1315,259],{"class":258},[248,1317,1318],{"class":250,"line":543},[248,1319,1320],{"class":265},"    # Must return `job_name`, `grade`, `label` columns (with condition for the `job_name` (`$jobName`))\n",[248,1322,1323,1325,1327],{"class":250,"line":551},[248,1324,484],{"class":254},[248,1326,275],{"class":258},[248,1328,318],{"class":317},[248,1330,1331,1333,1335],{"class":250,"line":557},[248,1332,494],{"class":254},[248,1334,275],{"class":258},[248,1336,500],{"class":499},[248,1338,1339],{"class":250,"line":566},[248,1340,505],{"class":281},[248,1342,1343],{"class":250,"line":573},[248,1344,1345],{"class":281},"        `job_grades`.`job_name` AS `job_grade.job_name`,\n",[248,1347,1348],{"class":250,"line":578},[248,1349,1350],{"class":281},"        `job_grades`.`grade` AS `job_grade.grade`,\n",[248,1352,1353],{"class":250,"line":588},[248,1354,1355],{"class":281},"        `job_grades`.`label` AS `job_grade.label`\n",[248,1357,1358],{"class":250,"line":596},[248,1359,522],{"class":281},[248,1361,1362],{"class":250,"line":604},[248,1363,1364],{"class":281},"        `job_grades`\n",[248,1366,1367],{"class":250,"line":612},[248,1368,628],{"class":281},[248,1370,1371],{"class":250,"line":617},[248,1372,1373],{"class":281},"        `job_name` = $jobName\n",[248,1375,1376],{"class":250,"line":625},[248,1377,534],{"class":281},[248,1379,1380],{"class":250,"line":631},[248,1381,540],{"class":281},[248,1383,1384,1386],{"class":250,"line":639},[248,1385,652],{"class":254},[248,1387,259],{"class":258},[248,1389,1390],{"class":250,"line":644},[248,1391,660],{"class":265},[248,1393,1394,1396,1398],{"class":250,"line":649},[248,1395,484],{"class":254},[248,1397,275],{"class":258},[248,1399,318],{"class":317},[248,1401,1402,1404,1406],{"class":250,"line":657},[248,1403,494],{"class":254},[248,1405,275],{"class":258},[248,1407,500],{"class":499},[248,1409,1410],{"class":250,"line":663},[248,1411,505],{"class":281},[248,1413,1414],{"class":250,"line":672},[248,1415,1416],{"class":281},"        `licenses`.`type` AS `license.type`,\n",[248,1418,1419],{"class":250,"line":681},[248,1420,1421],{"class":281},"        `licenses`.`label` AS `license.label`\n",[248,1423,1424],{"class":250,"line":686},[248,1425,522],{"class":281},[248,1427,1428],{"class":250,"line":692},[248,1429,706],{"class":281},[248,1431,1432],{"class":250,"line":698},[248,1433,534],{"class":281},[248,1435,1436],{"class":250,"line":703},[248,1437,540],{"class":281},[248,1439,1440,1442],{"class":250,"line":709},[248,1441,722],{"class":254},[248,1443,259],{"class":258},[248,1445,1446],{"class":250,"line":714},[248,1447,1448],{"class":265},"    # Must return `id`, `identifier`, `group`, `firstname`, `lastname`, `dateofbirth`, `job`, `job_grade`, `sex`, `phone_number` columns\n",[248,1450,1451],{"class":250,"line":719},[248,1452,1453],{"class":265},"    # Optional `height`, `visum`, `playtime` columns\n",[248,1455,1456,1458,1460],{"class":250,"line":727},[248,1457,484],{"class":254},[248,1459,275],{"class":258},[248,1461,318],{"class":317},[248,1463,1464],{"class":250,"line":733},[248,1465,763],{"class":265},[248,1467,1468],{"class":250,"line":739},[248,1469,769],{"class":265},[248,1471,1472],{"class":250,"line":748},[248,1473,775],{"class":265},[248,1475,1476,1478,1480],{"class":250,"line":754},[248,1477,494],{"class":254},[248,1479,275],{"class":258},[248,1481,500],{"class":499},[248,1483,1484],{"class":250,"line":760},[248,1485,505],{"class":281},[248,1487,1488],{"class":250,"line":766},[248,1489,1490],{"class":281},"        `players`.`id` AS `user.id`,\n",[248,1492,1493],{"class":250,"line":772},[248,1494,1495],{"class":281},"        CONCAT(`players`.`cid`, ':', `players`.`citizenid`) AS `user.identifier`,\n",[248,1497,1498],{"class":250,"line":778},[248,1499,1500],{"class":281},"        'user' AS `user.group`,\n",[248,1502,1503],{"class":250,"line":787},[248,1504,1505],{"class":281},"        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.firstname')) AS `user.firstname`,\n",[248,1507,1508],{"class":250,"line":792},[248,1509,1510],{"class":281},"        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.lastname')) AS `user.lastname`,\n",[248,1512,1513],{"class":250,"line":798},[248,1514,1515],{"class":281},"        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.birthdate')) AS `user.dateofbirth`,\n",[248,1517,1518],{"class":250,"line":804},[248,1519,1520],{"class":281},"        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.height')) AS `user.height`,\n",[248,1522,1523],{"class":250,"line":810},[248,1524,1525],{"class":281},"        JSON_UNQUOTE(JSON_EXTRACT(`players`.`job`, '$.name')) AS `user.job`,\n",[248,1527,1528],{"class":250,"line":816},[248,1529,1530],{"class":281},"        JSON_UNQUOTE(JSON_EXTRACT(`players`.`job`, '$.grade.level')) AS `user.job_grade`,\n",[248,1532,1533],{"class":250,"line":822},[248,1534,1535],{"class":281},"        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.gender')) AS `user.sex`,\n",[248,1537,1538],{"class":250,"line":828},[248,1539,522],{"class":281},[248,1541,1542],{"class":250,"line":834},[248,1543,1544],{"class":281},"        `players`\n",[248,1546,1547],{"class":250,"line":840},[248,1548,884],{"class":281},[248,1550,1551],{"class":250,"line":846},[248,1552,534],{"class":281},[248,1554,1555],{"class":250,"line":852},[248,1556,540],{"class":281},[248,1558,1559],{"class":250,"line":858},[248,1560,900],{"class":265},[248,1562,1563,1565,1567],{"class":250,"line":864},[248,1564,906],{"class":254},[248,1566,275],{"class":258},[248,1568,489],{"class":317},[248,1570,1571],{"class":250,"line":870},[248,1572,916],{"class":265},[248,1574,1575],{"class":250,"line":875},[248,1576,922],{"class":265},[248,1578,1579,1581],{"class":250,"line":881},[248,1580,928],{"class":254},[248,1582,259],{"class":258},[248,1584,1585,1587],{"class":250,"line":887},[248,1586,936],{"class":254},[248,1588,259],{"class":258},[248,1590,1591,1593,1595,1597,1599],{"class":250,"line":892},[248,1592,944],{"class":258},[248,1594,278],{"class":258},[248,1596,949],{"class":281},[248,1598,952],{"class":258},[248,1600,955],{"class":265},[248,1602,1603,1605,1607,1609,1611],{"class":250,"line":897},[248,1604,944],{"class":258},[248,1606,278],{"class":258},[248,1608,965],{"class":281},[248,1610,952],{"class":258},[248,1612,970],{"class":265},[248,1614,1615,1617,1619,1621,1623],{"class":250,"line":903},[248,1616,944],{"class":258},[248,1618,278],{"class":258},[248,1620,980],{"class":281},[248,1622,952],{"class":258},[248,1624,985],{"class":265},[248,1626,1627,1629,1631,1633,1635,1637],{"class":250,"line":913},[248,1628,991],{"class":254},[248,1630,275],{"class":258},[248,1632,278],{"class":258},[248,1634,980],{"class":281},[248,1636,952],{"class":258},[248,1638,1002],{"class":265},[248,1640,1641,1643],{"class":250,"line":919},[248,1642,1008],{"class":254},[248,1644,259],{"class":258},[248,1646,1647,1649],{"class":250,"line":925},[248,1648,1028],{"class":254},[248,1650,259],{"class":258},[248,1652,1653,1655,1657,1659,1661],{"class":250,"line":933},[248,1654,1036],{"class":254},[248,1656,275],{"class":258},[248,1658,1041],{"class":258},[248,1660,1044],{"class":281},[248,1662,1047],{"class":258},[248,1664,1665,1667],{"class":250,"line":941},[248,1666,1053],{"class":254},[248,1668,259],{"class":258},[248,1670,1671,1673,1675,1677,1679,1681,1683],{"class":250,"line":958},[248,1672,1061],{"class":258},[248,1674,1064],{"class":281},[248,1676,1067],{"class":258},[248,1678,275],{"class":258},[248,1680,1041],{"class":258},[248,1682,1074],{"class":281},[248,1684,1047],{"class":258},[248,1686,1687,1689],{"class":250,"line":973},[248,1688,1082],{"class":254},[248,1690,259],{"class":258},[248,1692,1693],{"class":250,"line":988},[248,1694,1695],{"class":265},"    # Must return `type`, `owner` columns\n",[248,1697,1698,1700,1702],{"class":250,"line":1005},[248,1699,484],{"class":254},[248,1701,275],{"class":258},[248,1703,318],{"class":317},[248,1705,1706,1708,1710],{"class":250,"line":1013},[248,1707,494],{"class":254},[248,1709,275],{"class":258},[248,1711,500],{"class":499},[248,1713,1714],{"class":250,"line":1019},[248,1715,505],{"class":281},[248,1717,1718],{"class":250,"line":1025},[248,1719,1119],{"class":281},[248,1721,1722],{"class":250,"line":1033},[248,1723,1724],{"class":281},"        `user_licenses`.`owner` AS `user_license.owner`\n",[248,1726,1727],{"class":250,"line":1050},[248,1728,522],{"class":281},[248,1730,1731],{"class":250,"line":1058},[248,1732,1136],{"class":281},[248,1734,1735],{"class":250,"line":1079},[248,1736,628],{"class":281},[248,1738,1739],{"class":250,"line":1087},[248,1740,1147],{"class":281},[248,1742,1743],{"class":250,"line":1093},[248,1744,534],{"class":281},[248,1746,1747],{"class":250,"line":1102},[248,1748,540],{"class":281},[248,1750,1751,1753],{"class":250,"line":1111},[248,1752,1163],{"class":254},[248,1754,259],{"class":258},[248,1756,1757],{"class":250,"line":1116},[248,1758,1759],{"class":265},"    # Must return `owner_id` (DB User ID) or `owner_identifier`, `plate`, `type`, `model` columns\n",[248,1761,1762,1764,1766],{"class":250,"line":1122},[248,1763,484],{"class":254},[248,1765,275],{"class":258},[248,1767,489],{"class":317},[248,1769,1770,1772,1774],{"class":250,"line":1128},[248,1771,494],{"class":254},[248,1773,275],{"class":258},[248,1775,500],{"class":499},[248,1777,1778],{"class":250,"line":1133},[248,1779,505],{"class":281},[248,1781,1782],{"class":250,"line":1139},[248,1783,1784],{"class":281},"        IF(`player_vehicles`.job_vehicle=0, CONCAT(players.cid, ':', players.`citizenid`), NULL) AS `vehicle.owner_identifier`,\n",[248,1786,1787],{"class":250,"line":1144},[248,1788,1789],{"class":281},"        `player_vehicles`.`plate` AS `vehicle.plate`,\n",[248,1791,1792],{"class":250,"line":1150},[248,1793,1794],{"class":281},"        `player_vehicles`.`garage_type` AS `vehicle.type`,\n",[248,1796,1797],{"class":250,"line":1155},[248,1798,1799],{"class":281},"        `player_vehicles`.`vehicle` AS `vehicle.model`,\n",[248,1801,1802],{"class":250,"line":1160},[248,1803,1804],{"class":281},"        IF(`player_vehicles`.`job_vehicle`=1, `player_vehicles`.`citizenid`, NULL) AS `vehicle.job`\n",[248,1806,1807],{"class":250,"line":1168},[248,1808,522],{"class":281},[248,1810,1811],{"class":250,"line":1174},[248,1812,1813],{"class":281},"        `player_vehicles`\n",[248,1815,1816],{"class":250,"line":1183},[248,1817,1818],{"class":281},"        LEFT JOIN `players` ON (`players`.`citizenid` = `player_vehicles`.`citizenid`)\n",[248,1820,1821],{"class":250,"line":1192},[248,1822,534],{"class":281},[248,1824,1825],{"class":250,"line":1197},[248,1826,540],{"class":281},[1828,1829,1830],"style",{},"html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .sfNiH, html code.shiki .sfNiH{--shiki-light:#FF5370;--shiki-default:#FF9CAC;--shiki-dark:#FF9CAC}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}",{"title":244,"searchDepth":262,"depth":262,"links":1832},[1833,1836],{"id":211,"depth":262,"text":23,"children":1834},[1835],{"id":395,"depth":269,"text":396},{"id":445,"depth":262,"text":446,"children":1837},[1838,1839],{"id":449,"depth":269,"text":450},{"id":1242,"depth":269,"text":1243},"md",null,{},true,{"title":40,"description":183},"i7XK1e9rlSxMGz4DwboC47L-DHHivbhX5tRsV0lZYI0",[1847,1849],{"title":36,"path":37,"stem":38,"description":1848,"children":-1},"If you are using ESX and want to use your server's ESX tables directly, you can use the ESX Compatibility Mode option database.esxCompat: true.",{"title":44,"path":45,"stem":46,"description":244,"children":-1},1744296362547]