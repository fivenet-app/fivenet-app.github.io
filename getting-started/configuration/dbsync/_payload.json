[{"data":1,"prerenderedAt":1990},["ShallowReactive",2],{"navigation":3,"/getting-started/configuration/dbsync":175,"/getting-started/configuration/dbsync-surround":1986},[4,81,133,151],{"title":5,"path":6,"stem":7,"children":8},"Getting Started","/getting-started","1.getting-started/1.index",[9,10,14,18,22,52,56],{"title":5,"path":6,"stem":7},{"title":11,"path":12,"stem":13},"Requirements","/getting-started/requirements","1.getting-started/1.requirements",{"title":15,"path":16,"stem":17},"Features","/getting-started/features","1.getting-started/2.features",{"title":19,"path":20,"stem":21},"Components","/getting-started/components","1.getting-started/3.components",{"title":23,"path":24,"stem":25,"children":26,"page":51},"Configuration","/getting-started/configuration","1.getting-started/3.configuration",[27,31,35,39,43,47],{"title":28,"path":29,"stem":30},"Config File Reference","/getting-started/configuration/config-reference","1.getting-started/3.configuration/1.config-reference",{"title":32,"path":33,"stem":34},"Config Examples","/getting-started/configuration/config-examples","1.getting-started/3.configuration/2.config-examples",{"title":36,"path":37,"stem":38},"ESX Compatibility Mode","/getting-started/configuration/esx-compat-mode","1.getting-started/3.configuration/2.esx-compat-mode",{"title":40,"path":41,"stem":42},"DBSync","/getting-started/configuration/dbsync","1.getting-started/3.configuration/3.dbsync",{"title":44,"path":45,"stem":46},"Command Flags","/getting-started/configuration/flags","1.getting-started/3.configuration/5.flags",{"title":48,"path":49,"stem":50},"Database Basics","/getting-started/configuration/database-basics","1.getting-started/3.configuration/6.database-basics",false,{"title":53,"path":54,"stem":55},"Demo","/getting-started/demo","1.getting-started/4.demo",{"title":57,"path":58,"stem":59,"children":60,"page":51},"Installation","/getting-started/installation","1.getting-started/4.installation",[61,65,69,73,77],{"title":62,"path":63,"stem":64},"Methods","/getting-started/installation/methods","1.getting-started/4.installation/1.methods",{"title":66,"path":67,"stem":68},"Cloud","/getting-started/installation/cloud","1.getting-started/4.installation/2.cloud",{"title":70,"path":71,"stem":72},"Using Docker","/getting-started/installation/container-docker","1.getting-started/4.installation/3.container-docker",{"title":74,"path":75,"stem":76},"Kubernetes: Using Helm","/getting-started/installation/kubernetes-helm","1.getting-started/4.installation/4.kubernetes-helm",{"title":78,"path":79,"stem":80},"After Install Steps","/getting-started/installation/post-install-steps","1.getting-started/4.installation/6.post-install-steps",{"title":82,"path":83,"stem":84,"children":85},"User Guides","/user-guides","3.user-guides/0.index",[86,87,91,95,105,109,113,117,121,125,129],{"title":82,"path":83,"stem":84},{"title":88,"path":89,"stem":90},"Citizens","/user-guides/citizens","3.user-guides/1.citizens",{"title":92,"path":93,"stem":94},"Vehicles","/user-guides/vehicles","3.user-guides/2.vehicles",{"title":96,"path":97,"stem":98,"children":99},"Documents","/user-guides/documents","3.user-guides/3.documents/index",[100,101],{"title":96,"path":97,"stem":98},{"title":102,"path":103,"stem":104},"Templates","/user-guides/documents/templates","3.user-guides/3.documents/templates",{"title":106,"path":107,"stem":108},"Jobs","/user-guides/jobs","3.user-guides/3.jobs",{"title":110,"path":111,"stem":112},"Calendar","/user-guides/calendar","3.user-guides/4.calendar",{"title":114,"path":115,"stem":116},"Livemap","/user-guides/livemap","3.user-guides/5.livemap",{"title":118,"path":119,"stem":120},"Dispatch Center","/user-guides/centrum","3.user-guides/6.centrum",{"title":122,"path":123,"stem":124},"Mailer","/user-guides/mailer","3.user-guides/6.mailer",{"title":126,"path":127,"stem":128},"Settings","/user-guides/settings","3.user-guides/7.settings",{"title":130,"path":131,"stem":132},"Languages (i18n)","/user-guides/i18n","3.user-guides/8.i18n",{"title":134,"path":135,"stem":136,"children":137},"Development","/development","8.development/1.index",[138,139,143,147],{"title":134,"path":135,"stem":136},{"title":140,"path":141,"stem":142},"Protocol Documentation","/development/grpc-api","8.development/3.grpc-api",{"title":144,"path":145,"stem":146},"Release Process","/development/release","8.development/4.release",{"title":148,"path":149,"stem":150},"User Activity","/development/user-activity","8.development/5.user-activity",{"title":152,"path":153,"stem":154,"children":155,"page":51},"Design Docs","/design","9.design",[156,160,163,167,171],{"title":157,"path":158,"stem":159},"DB Sync","/design/db-sync","9.design/db-sync",{"title":118,"path":161,"stem":162},"/design/dispatch-center","9.design/dispatch-center",{"title":164,"path":165,"stem":166},"Employee Management","/design/employee-management","9.design/employee-management",{"title":168,"path":169,"stem":170},"Player Tracker Rework","/design/player-tracker-rework","9.design/player-tracker-rework",{"title":172,"path":173,"stem":174},"Qualifications","/design/qualifications","9.design/qualifications",{"id":176,"title":40,"body":177,"description":183,"extension":1980,"links":1981,"meta":1982,"navigation":1983,"path":41,"seo":1984,"stem":42,"__hash__":1985},"docs/1.getting-started/3.configuration/3.dbsync.md",{"type":178,"value":179,"toc":1968},"minimal",[180,184,187,208,212,215,227,234,241,339,345,386,394,397,402,413,509,513,531,559,563,574,580,583,587,591,1377,1381,1964],[181,182,183],"p",{},"The DBSync is used to sync character/player, vehicles, and other data to your FiveNet instance.",[181,185,186],{},"Reasons why you would use the DBSync are:",[188,189,190,199,202,205],"ul",{},[191,192,193,194,198],"li",{},"You are ",[195,196,197],"strong",{},"not"," using the FiveM ESX framework.",[191,200,201],{},"To run FiveNet in \"standalone\" mode independent of the gameserver.",[191,203,204],{},"You would not be able to make the gameserver's database server reachable by FiveNet (e.g., restricted gameserver hosting, firewalls you can't change).",[191,206,207],{},"You are using the FiveNet Cloud offering.",[209,210,57],"h2",{"id":211},"installation",[209,213,23],{"id":214},"configuration",[181,216,217,218,222,223,226],{},"The configuration file for the DBSync by default is called ",[219,220,221],"code",{},"dbsync.yaml",".\nThe DBSync process stores the \"sync state\" in a file called ",[219,224,225],{},"dbsync.state.yaml"," by default. This file is used to keep track of the last synced data, it should persisted as to not cause the DBSync to re-sync everything again.",[181,228,229,230,233],{},"To get started make sure that you have enabled the sync and configured a sync API token in your FiveNet's ",[219,231,232],{},"config.yaml"," file.",[181,235,236,237,240],{},"The ",[219,238,239],{},"destination:"," section is where you need to configure the URL to your FiveNet instance, example:",[242,243,248],"pre",{"className":244,"code":245,"language":246,"meta":247,"style":247},"language-yaml shiki shiki-themes material-theme-lighter material-theme material-theme-palenight","destination:\n  # Host + port to your FiveNet instance (requires HTTPS/valid TLS certs, unless insecure is set to `true`)\n  url: \"fivenet.example.com\"\n  token: \"YOUR_SYNC_API_TOKEN\"\n  # Disable TLS verification (not recommended)\n  insecure: false\n  # Sync Interval can also be specified per table in the `tables:` section\n  syncInterval: 5s\n","yaml","",[219,249,250,263,270,289,304,310,322,328],{"__ignoreMap":247},[251,252,255,259],"span",{"class":253,"line":254},"line",1,[251,256,258],{"class":257},"swJcz","destination",[251,260,262],{"class":261},"sMK4o",":\n",[251,264,266],{"class":253,"line":265},2,[251,267,269],{"class":268},"sHwdD","  # Host + port to your FiveNet instance (requires HTTPS/valid TLS certs, unless insecure is set to `true`)\n",[251,271,273,276,279,282,286],{"class":253,"line":272},3,[251,274,275],{"class":257},"  url",[251,277,278],{"class":261},":",[251,280,281],{"class":261}," \"",[251,283,285],{"class":284},"sfazB","fivenet.example.com",[251,287,288],{"class":261},"\"\n",[251,290,292,295,297,299,302],{"class":253,"line":291},4,[251,293,294],{"class":257},"  token",[251,296,278],{"class":261},[251,298,281],{"class":261},[251,300,301],{"class":284},"YOUR_SYNC_API_TOKEN",[251,303,288],{"class":261},[251,305,307],{"class":253,"line":306},5,[251,308,309],{"class":268},"  # Disable TLS verification (not recommended)\n",[251,311,313,316,318],{"class":253,"line":312},6,[251,314,315],{"class":257},"  insecure",[251,317,278],{"class":261},[251,319,321],{"class":320},"sfNiH"," false\n",[251,323,325],{"class":253,"line":324},7,[251,326,327],{"class":268},"  # Sync Interval can also be specified per table in the `tables:` section\n",[251,329,331,334,336],{"class":253,"line":330},8,[251,332,333],{"class":257},"  syncInterval",[251,335,278],{"class":261},[251,337,338],{"class":284}," 5s\n",[181,340,236,341,344],{},[219,342,343],{},"source:"," section holds the database connection details of your gameserver database which holds the tables you want to sync to FiveNet.",[242,346,348],{"className":244,"code":347,"language":246,"meta":247,"style":247},"# Changes to the source require a restart of the dbsync\nsource:\n  # Refer to https://github.com/go-sql-driver/mysql#dsn-data-source-name for details\n  # Please note that the `parseTime` parameter is allows set to true\n  dsn: \"DB_USER:DB_PASS@tcp(DB_HOST:DB_PORT)/DB_NAME?collation=utf8mb4_unicode_ci&loc=Europe%2FBerlin\"\n",[219,349,350,355,362,367,372],{"__ignoreMap":247},[251,351,352],{"class":253,"line":254},[251,353,354],{"class":268},"# Changes to the source require a restart of the dbsync\n",[251,356,357,360],{"class":253,"line":265},[251,358,359],{"class":257},"source",[251,361,262],{"class":261},[251,363,364],{"class":253,"line":272},[251,365,366],{"class":268},"  # Refer to https://github.com/go-sql-driver/mysql#dsn-data-source-name for details\n",[251,368,369],{"class":253,"line":291},[251,370,371],{"class":268},"  # Please note that the `parseTime` parameter is allows set to true\n",[251,373,374,377,379,381,384],{"class":253,"line":306},[251,375,376],{"class":257},"  dsn",[251,378,278],{"class":261},[251,380,281],{"class":261},[251,382,383],{"class":284},"DB_USER:DB_PASS@tcp(DB_HOST:DB_PORT)/DB_NAME?collation=utf8mb4_unicode_ci&loc=Europe%2FBerlin",[251,385,288],{"class":261},[181,387,236,388,393],{},[389,390,392],"a",{"href":391},"#table-queries","tables: section"," is used to configure the queries for the tables you want to sync to FiveNet.\nPlease see the examples below for the ESX and QBCore frameworks.",[181,395,396],{},"Should you be using another framework, you will need to adjust the queries accordingly.",[398,399,401],"h3",{"id":400},"database-user-for-source","Database User for Source",[181,403,404,405,408,409,412],{},"The user only needs read access to the gameserver's database. Example queries to create a separate user and grant read access to the database (make sure to replace the username and password in the ",[219,406,407],{},"CREATE USER",", and gameserver database name in the ",[219,410,411],{},"GRANT"," statement):",[242,414,418],{"className":415,"code":416,"language":417,"meta":247,"style":247},"language-sql shiki shiki-themes material-theme-lighter material-theme material-theme-palenight","CREATE USER 'fivenet_dbsync'@'localhost' IDENTIFIED BY 'YOUR_DBSYNC_USER_PASSWORD';\nGRANT SELECT ON `your_gameserver_db`.* TO 'fivenet_dbsync'@'localhost';\n","sql",[219,419,420,464],{"__ignoreMap":247},[251,421,422,426,429,433,437,440,443,446,448,451,454,456,459,461],{"class":253,"line":254},[251,423,425],{"class":424},"sbssI","CREATE",[251,427,428],{"class":424}," USER",[251,430,432],{"class":431},"sTEyZ"," '",[251,434,436],{"class":435},"s2Zo4","fivenet_dbsync",[251,438,439],{"class":431},"'@",[251,441,442],{"class":261},"'",[251,444,445],{"class":284},"localhost",[251,447,442],{"class":261},[251,449,450],{"class":431}," IDENTIFIED ",[251,452,453],{"class":424},"BY",[251,455,432],{"class":261},[251,457,458],{"class":284},"YOUR_DBSYNC_USER_PASSWORD",[251,460,442],{"class":261},[251,462,463],{"class":431},";\n",[251,465,466,468,471,474,477,480,483,486,489,492,494,496,498,501,503,505,507],{"class":253,"line":265},[251,467,411],{"class":424},[251,469,470],{"class":424}," SELECT",[251,472,473],{"class":424}," ON",[251,475,476],{"class":261}," `",[251,478,479],{"class":284},"your_gameserver_db",[251,481,482],{"class":261},"`",[251,484,485],{"class":431},".",[251,487,488],{"class":261},"*",[251,490,491],{"class":424}," TO",[251,493,432],{"class":261},[251,495,436],{"class":284},[251,497,442],{"class":261},[251,499,500],{"class":431},"@",[251,502,442],{"class":261},[251,504,445],{"class":284},[251,506,442],{"class":261},[251,508,463],{"class":431},[398,510,512],{"id":511},"table-queries","Table Queries",[181,514,515,516,519,520,523,524,523,527,530],{},"The queries for the tables must return the columns in the format specified per table, e.g., to return user info the format must be ",[219,517,518],{},"user.COLUMN"," (e.g., ",[219,521,522],{},"user.id",", ",[219,525,526],{},"user.firstname",[219,528,529],{},"user.lastname",").",[181,532,533,534,537,538,541,542,544,545,547,548,537,551,554,555,558],{},"An important point to note is that it is especially important to return a consistent ",[219,535,536],{},"id"," and ",[219,539,540],{},"identifier"," field for the users/characters.\nThe ",[219,543,536],{}," field is used to identify the user in the database, and the ",[219,546,540],{}," field is used to identify the user in FiveNet.\nIn addition to being used to \"bind\" multiple users/chars to one account, e.g., identifier ",[219,549,550],{},"char1:LICENSE",[219,552,553],{},"char2:LICENSE"," and the account only has the ",[219,556,557],{},"LICENSE"," set on it.",[209,560,562],{"id":561},"usage","Usage",[181,564,565,566,569,570,573],{},"To run the DBSync process use the ",[219,567,568],{},"fivenet"," command/binary and run it like this ",[219,571,572],{},"fivenet dbsync"," .",[181,575,576,577,485],{},"In case you need to specify different config files, check the help menu via ",[219,578,579],{},"fivenet dbsync --help",[181,581,582],{},"You should run the dbsync as a service on your server, e.g., on Linux via a systemd unit, Windows service.",[209,584,586],{"id":585},"example-configs","Example Configs",[398,588,590],{"id":589},"esx-framework","ESX Framework",[242,592,594],{"className":244,"code":593,"language":246,"meta":247,"style":247},"tables:\n  # The example queries here are for the ESX framework\n  jobs:\n    # Must return `job.name`, `job.label` columns\n    enabled: true\n    query: |\n      SELECT\n        `jobs`.`name` AS `job.name`,\n        `jobs`.`label` AS `job.label`\n      FROM\n        `jobs`\n      LIMIT $limit\n      OFFSET $offset;\n  jobGrades:\n    # Must return `job_grade.job_name`, `job_grade.grade`, `job_grade.label` columns (with condition for the `job_name`)\n    enabled: true\n    query:\n      SELECT\n        `job_grades`.`job_name` AS `job_grade.job_name`,\n        `job_grades`.`grade` AS `job_grade.grade`,\n        `job_grades`.`name` AS `job_grade.name`,\n        `job_grades`.`label` AS `job_grade.label`\n      FROM\n        `job_grades`\n      WHERE\n        `job_grades.job_name` = $jobName\n      LIMIT $limit\n      OFFSET $offset;\n  licenses:\n    # Must return `type`, `label` columns\n    enabled: true\n    query: |\n      SELECT\n        `license.type`,\n        `license.label`\n      FROM\n        `licenses`\n      LIMIT $limit\n      OFFSET $offset;\n  users:\n    # Must return `user.id`, `user.identifier`, `user.group`, `user.firstname`, `user.lastname`, `user.dateofbirth`, `user.job`, `user.job_grade`, `user.sex`, `user.phone_number` columns\n    # Optional columns: `user.height`, `user.visum`, `user.playtime`\n    enabled: true\n    # If your \"players\"/\"users\" data has a timestamp/datetime column that is updated on update,\n    # configure it here so that after the initial sync only the changed data is synced again.\n    #updatedTimeColumn: \"last_seen\"\n    # The identifier column should be a smart combination of values when using a multichar system.\n    # E.g., it is prefered to use a ESX like identifier layout for that case `charX:LICENSE`\n    query: |\n      SELECT\n        `users`.`id` AS `user.id`,\n        `users`.`identifier` AS `user.identifier`,\n        `users`.`group` AS `user.group`,\n        `users`.`firstname` AS `user.firstname`,\n        `users`.`lastname` AS `user.lastname`,\n        `users`.`dateofbirth` AS `user.dateofbirth`,\n        `users`.`job` AS `user.job`,\n        `users`.`job_grade` AS `user.job_grade`,\n        `users`.`sex` AS `user.sex`,\n        `users`.`phone_number` AS `user.phone_number`,\n        `users`.`height` AS `user.height`,\n        `users`.`visum` AS `user.visum`,\n        `users`.`playtime` AS `user.playtime`\n      FROM\n        `users`\n      $whereCondition\n      LIMIT $limit\n      OFFSET $offset;\n    # If a lastname is not returned by the query, attempt to split the firstname into \"two\" parts\n    splitName: true\n    # Normalize date of birth value to the output format if possible\n    # Please see the Go `time` pkg documentation on potential date format layouts: https://pkg.go.dev/time#Layout\n    dateOfBirth:\n      formats:\n        - \"2006-01-02\" # 2000-10-18 = YYYY-MM-DD\n        - \"02/01/2006\" # 09/06/1993 = MM/DD/YYYY\n        - \"02.01.2006\" # 01.08.1982 = DD.MM.YYYY\n      outputFormat: \"02.01.2006\" # DD.MM.YYYY\n    valueMapping:\n      # This allows to map values to different values for FiveNet\n      # E.g., the sex of a char must be either `m`, `f`, or `d`\n      sex:\n        fallback: 'm'\n        values:\n          '1': 'f'\n  userLicenses:\n    # Must return `user_license.type`, `user_license.owner` columns\n    enabled: true\n    query: |\n      SELECT\n        `user_licenses`.`type` AS `user_license.type`,\n        `user_licenses`.`owner AS `user_license.owner``\n      FROM\n        `user_licenses`\n      WHERE\n        `owner` = $identifier\n      LIMIT $limit\n      OFFSET $offset;\n  vehicles:\n    # Must return `vehicle.owner_id` or `vehicle.owner_identifier`, `vehicle.plate`, `vehicle.type`, `vehicle.model` columns\n    enabled: true\n    query: |\n      SELECT\n        `owned_vehicles`.`owner` AS `vehicle.owner_identifier`,\n        `owned_vehicles`.`plate` AS `vehicle.plate`,\n        `owned_vehicles`.`type` AS `vehicle.type`,\n        `owned_vehicles`.`model` AS `vehicle.model`\n      FROM\n        `owned_vehicles`\n      LIMIT $limit\n      OFFSET $offset;\n",[219,595,596,603,608,615,620,630,641,646,651,657,663,669,675,681,689,695,704,711,716,725,733,741,749,754,762,768,776,781,786,794,800,809,818,823,829,835,840,846,851,856,864,870,876,885,891,897,903,909,915,924,929,935,941,947,953,959,965,971,977,983,989,995,1001,1007,1012,1018,1024,1029,1034,1040,1050,1056,1062,1070,1078,1095,1110,1125,1142,1150,1156,1162,1170,1186,1194,1214,1222,1228,1237,1246,1251,1257,1263,1268,1274,1279,1285,1290,1295,1303,1309,1318,1327,1332,1338,1344,1350,1356,1361,1367,1372],{"__ignoreMap":247},[251,597,598,601],{"class":253,"line":254},[251,599,600],{"class":257},"tables",[251,602,262],{"class":261},[251,604,605],{"class":253,"line":265},[251,606,607],{"class":268},"  # The example queries here are for the ESX framework\n",[251,609,610,613],{"class":253,"line":272},[251,611,612],{"class":257},"  jobs",[251,614,262],{"class":261},[251,616,617],{"class":253,"line":291},[251,618,619],{"class":268},"    # Must return `job.name`, `job.label` columns\n",[251,621,622,625,627],{"class":253,"line":306},[251,623,624],{"class":257},"    enabled",[251,626,278],{"class":261},[251,628,629],{"class":320}," true\n",[251,631,632,635,637],{"class":253,"line":312},[251,633,634],{"class":257},"    query",[251,636,278],{"class":261},[251,638,640],{"class":639},"s7zQu"," |\n",[251,642,643],{"class":253,"line":324},[251,644,645],{"class":284},"      SELECT\n",[251,647,648],{"class":253,"line":330},[251,649,650],{"class":284},"        `jobs`.`name` AS `job.name`,\n",[251,652,654],{"class":253,"line":653},9,[251,655,656],{"class":284},"        `jobs`.`label` AS `job.label`\n",[251,658,660],{"class":253,"line":659},10,[251,661,662],{"class":284},"      FROM\n",[251,664,666],{"class":253,"line":665},11,[251,667,668],{"class":284},"        `jobs`\n",[251,670,672],{"class":253,"line":671},12,[251,673,674],{"class":284},"      LIMIT $limit\n",[251,676,678],{"class":253,"line":677},13,[251,679,680],{"class":284},"      OFFSET $offset;\n",[251,682,684,687],{"class":253,"line":683},14,[251,685,686],{"class":257},"  jobGrades",[251,688,262],{"class":261},[251,690,692],{"class":253,"line":691},15,[251,693,694],{"class":268},"    # Must return `job_grade.job_name`, `job_grade.grade`, `job_grade.label` columns (with condition for the `job_name`)\n",[251,696,698,700,702],{"class":253,"line":697},16,[251,699,624],{"class":257},[251,701,278],{"class":261},[251,703,629],{"class":320},[251,705,707,709],{"class":253,"line":706},17,[251,708,634],{"class":257},[251,710,262],{"class":261},[251,712,714],{"class":253,"line":713},18,[251,715,645],{"class":284},[251,717,719,722],{"class":253,"line":718},19,[251,720,721],{"class":431},"        `",[251,723,724],{"class":284},"job_grades`.`job_name` AS `job_grade.job_name`,\n",[251,726,728,730],{"class":253,"line":727},20,[251,729,721],{"class":431},[251,731,732],{"class":284},"job_grades`.`grade` AS `job_grade.grade`,\n",[251,734,736,738],{"class":253,"line":735},21,[251,737,721],{"class":431},[251,739,740],{"class":284},"job_grades`.`name` AS `job_grade.name`,\n",[251,742,744,746],{"class":253,"line":743},22,[251,745,721],{"class":431},[251,747,748],{"class":284},"job_grades`.`label` AS `job_grade.label`\n",[251,750,752],{"class":253,"line":751},23,[251,753,662],{"class":284},[251,755,757,759],{"class":253,"line":756},24,[251,758,721],{"class":431},[251,760,761],{"class":284},"job_grades`\n",[251,763,765],{"class":253,"line":764},25,[251,766,767],{"class":284},"      WHERE\n",[251,769,771,773],{"class":253,"line":770},26,[251,772,721],{"class":431},[251,774,775],{"class":284},"job_grades.job_name` = $jobName\n",[251,777,779],{"class":253,"line":778},27,[251,780,674],{"class":284},[251,782,784],{"class":253,"line":783},28,[251,785,680],{"class":284},[251,787,789,792],{"class":253,"line":788},29,[251,790,791],{"class":257},"  licenses",[251,793,262],{"class":261},[251,795,797],{"class":253,"line":796},30,[251,798,799],{"class":268},"    # Must return `type`, `label` columns\n",[251,801,803,805,807],{"class":253,"line":802},31,[251,804,624],{"class":257},[251,806,278],{"class":261},[251,808,629],{"class":320},[251,810,812,814,816],{"class":253,"line":811},32,[251,813,634],{"class":257},[251,815,278],{"class":261},[251,817,640],{"class":639},[251,819,821],{"class":253,"line":820},33,[251,822,645],{"class":284},[251,824,826],{"class":253,"line":825},34,[251,827,828],{"class":284},"        `license.type`,\n",[251,830,832],{"class":253,"line":831},35,[251,833,834],{"class":284},"        `license.label`\n",[251,836,838],{"class":253,"line":837},36,[251,839,662],{"class":284},[251,841,843],{"class":253,"line":842},37,[251,844,845],{"class":284},"        `licenses`\n",[251,847,849],{"class":253,"line":848},38,[251,850,674],{"class":284},[251,852,854],{"class":253,"line":853},39,[251,855,680],{"class":284},[251,857,859,862],{"class":253,"line":858},40,[251,860,861],{"class":257},"  users",[251,863,262],{"class":261},[251,865,867],{"class":253,"line":866},41,[251,868,869],{"class":268},"    # Must return `user.id`, `user.identifier`, `user.group`, `user.firstname`, `user.lastname`, `user.dateofbirth`, `user.job`, `user.job_grade`, `user.sex`, `user.phone_number` columns\n",[251,871,873],{"class":253,"line":872},42,[251,874,875],{"class":268},"    # Optional columns: `user.height`, `user.visum`, `user.playtime`\n",[251,877,879,881,883],{"class":253,"line":878},43,[251,880,624],{"class":257},[251,882,278],{"class":261},[251,884,629],{"class":320},[251,886,888],{"class":253,"line":887},44,[251,889,890],{"class":268},"    # If your \"players\"/\"users\" data has a timestamp/datetime column that is updated on update,\n",[251,892,894],{"class":253,"line":893},45,[251,895,896],{"class":268},"    # configure it here so that after the initial sync only the changed data is synced again.\n",[251,898,900],{"class":253,"line":899},46,[251,901,902],{"class":268},"    #updatedTimeColumn: \"last_seen\"\n",[251,904,906],{"class":253,"line":905},47,[251,907,908],{"class":268},"    # The identifier column should be a smart combination of values when using a multichar system.\n",[251,910,912],{"class":253,"line":911},48,[251,913,914],{"class":268},"    # E.g., it is prefered to use a ESX like identifier layout for that case `charX:LICENSE`\n",[251,916,918,920,922],{"class":253,"line":917},49,[251,919,634],{"class":257},[251,921,278],{"class":261},[251,923,640],{"class":639},[251,925,927],{"class":253,"line":926},50,[251,928,645],{"class":284},[251,930,932],{"class":253,"line":931},51,[251,933,934],{"class":284},"        `users`.`id` AS `user.id`,\n",[251,936,938],{"class":253,"line":937},52,[251,939,940],{"class":284},"        `users`.`identifier` AS `user.identifier`,\n",[251,942,944],{"class":253,"line":943},53,[251,945,946],{"class":284},"        `users`.`group` AS `user.group`,\n",[251,948,950],{"class":253,"line":949},54,[251,951,952],{"class":284},"        `users`.`firstname` AS `user.firstname`,\n",[251,954,956],{"class":253,"line":955},55,[251,957,958],{"class":284},"        `users`.`lastname` AS `user.lastname`,\n",[251,960,962],{"class":253,"line":961},56,[251,963,964],{"class":284},"        `users`.`dateofbirth` AS `user.dateofbirth`,\n",[251,966,968],{"class":253,"line":967},57,[251,969,970],{"class":284},"        `users`.`job` AS `user.job`,\n",[251,972,974],{"class":253,"line":973},58,[251,975,976],{"class":284},"        `users`.`job_grade` AS `user.job_grade`,\n",[251,978,980],{"class":253,"line":979},59,[251,981,982],{"class":284},"        `users`.`sex` AS `user.sex`,\n",[251,984,986],{"class":253,"line":985},60,[251,987,988],{"class":284},"        `users`.`phone_number` AS `user.phone_number`,\n",[251,990,992],{"class":253,"line":991},61,[251,993,994],{"class":284},"        `users`.`height` AS `user.height`,\n",[251,996,998],{"class":253,"line":997},62,[251,999,1000],{"class":284},"        `users`.`visum` AS `user.visum`,\n",[251,1002,1004],{"class":253,"line":1003},63,[251,1005,1006],{"class":284},"        `users`.`playtime` AS `user.playtime`\n",[251,1008,1010],{"class":253,"line":1009},64,[251,1011,662],{"class":284},[251,1013,1015],{"class":253,"line":1014},65,[251,1016,1017],{"class":284},"        `users`\n",[251,1019,1021],{"class":253,"line":1020},66,[251,1022,1023],{"class":284},"      $whereCondition\n",[251,1025,1027],{"class":253,"line":1026},67,[251,1028,674],{"class":284},[251,1030,1032],{"class":253,"line":1031},68,[251,1033,680],{"class":284},[251,1035,1037],{"class":253,"line":1036},69,[251,1038,1039],{"class":268},"    # If a lastname is not returned by the query, attempt to split the firstname into \"two\" parts\n",[251,1041,1043,1046,1048],{"class":253,"line":1042},70,[251,1044,1045],{"class":257},"    splitName",[251,1047,278],{"class":261},[251,1049,629],{"class":320},[251,1051,1053],{"class":253,"line":1052},71,[251,1054,1055],{"class":268},"    # Normalize date of birth value to the output format if possible\n",[251,1057,1059],{"class":253,"line":1058},72,[251,1060,1061],{"class":268},"    # Please see the Go `time` pkg documentation on potential date format layouts: https://pkg.go.dev/time#Layout\n",[251,1063,1065,1068],{"class":253,"line":1064},73,[251,1066,1067],{"class":257},"    dateOfBirth",[251,1069,262],{"class":261},[251,1071,1073,1076],{"class":253,"line":1072},74,[251,1074,1075],{"class":257},"      formats",[251,1077,262],{"class":261},[251,1079,1081,1084,1086,1089,1092],{"class":253,"line":1080},75,[251,1082,1083],{"class":261},"        -",[251,1085,281],{"class":261},[251,1087,1088],{"class":284},"2006-01-02",[251,1090,1091],{"class":261},"\"",[251,1093,1094],{"class":268}," # 2000-10-18 = YYYY-MM-DD\n",[251,1096,1098,1100,1102,1105,1107],{"class":253,"line":1097},76,[251,1099,1083],{"class":261},[251,1101,281],{"class":261},[251,1103,1104],{"class":284},"02/01/2006",[251,1106,1091],{"class":261},[251,1108,1109],{"class":268}," # 09/06/1993 = MM/DD/YYYY\n",[251,1111,1113,1115,1117,1120,1122],{"class":253,"line":1112},77,[251,1114,1083],{"class":261},[251,1116,281],{"class":261},[251,1118,1119],{"class":284},"02.01.2006",[251,1121,1091],{"class":261},[251,1123,1124],{"class":268}," # 01.08.1982 = DD.MM.YYYY\n",[251,1126,1128,1131,1133,1135,1137,1139],{"class":253,"line":1127},78,[251,1129,1130],{"class":257},"      outputFormat",[251,1132,278],{"class":261},[251,1134,281],{"class":261},[251,1136,1119],{"class":284},[251,1138,1091],{"class":261},[251,1140,1141],{"class":268}," # DD.MM.YYYY\n",[251,1143,1145,1148],{"class":253,"line":1144},79,[251,1146,1147],{"class":257},"    valueMapping",[251,1149,262],{"class":261},[251,1151,1153],{"class":253,"line":1152},80,[251,1154,1155],{"class":268},"      # This allows to map values to different values for FiveNet\n",[251,1157,1159],{"class":253,"line":1158},81,[251,1160,1161],{"class":268},"      # E.g., the sex of a char must be either `m`, `f`, or `d`\n",[251,1163,1165,1168],{"class":253,"line":1164},82,[251,1166,1167],{"class":257},"      sex",[251,1169,262],{"class":261},[251,1171,1173,1176,1178,1180,1183],{"class":253,"line":1172},83,[251,1174,1175],{"class":257},"        fallback",[251,1177,278],{"class":261},[251,1179,432],{"class":261},[251,1181,1182],{"class":284},"m",[251,1184,1185],{"class":261},"'\n",[251,1187,1189,1192],{"class":253,"line":1188},84,[251,1190,1191],{"class":257},"        values",[251,1193,262],{"class":261},[251,1195,1197,1200,1203,1205,1207,1209,1212],{"class":253,"line":1196},85,[251,1198,1199],{"class":261},"          '",[251,1201,1202],{"class":284},"1",[251,1204,442],{"class":261},[251,1206,278],{"class":261},[251,1208,432],{"class":261},[251,1210,1211],{"class":284},"f",[251,1213,1185],{"class":261},[251,1215,1217,1220],{"class":253,"line":1216},86,[251,1218,1219],{"class":257},"  userLicenses",[251,1221,262],{"class":261},[251,1223,1225],{"class":253,"line":1224},87,[251,1226,1227],{"class":268},"    # Must return `user_license.type`, `user_license.owner` columns\n",[251,1229,1231,1233,1235],{"class":253,"line":1230},88,[251,1232,624],{"class":257},[251,1234,278],{"class":261},[251,1236,629],{"class":320},[251,1238,1240,1242,1244],{"class":253,"line":1239},89,[251,1241,634],{"class":257},[251,1243,278],{"class":261},[251,1245,640],{"class":639},[251,1247,1249],{"class":253,"line":1248},90,[251,1250,645],{"class":284},[251,1252,1254],{"class":253,"line":1253},91,[251,1255,1256],{"class":284},"        `user_licenses`.`type` AS `user_license.type`,\n",[251,1258,1260],{"class":253,"line":1259},92,[251,1261,1262],{"class":284},"        `user_licenses`.`owner AS `user_license.owner``\n",[251,1264,1266],{"class":253,"line":1265},93,[251,1267,662],{"class":284},[251,1269,1271],{"class":253,"line":1270},94,[251,1272,1273],{"class":284},"        `user_licenses`\n",[251,1275,1277],{"class":253,"line":1276},95,[251,1278,767],{"class":284},[251,1280,1282],{"class":253,"line":1281},96,[251,1283,1284],{"class":284},"        `owner` = $identifier\n",[251,1286,1288],{"class":253,"line":1287},97,[251,1289,674],{"class":284},[251,1291,1293],{"class":253,"line":1292},98,[251,1294,680],{"class":284},[251,1296,1298,1301],{"class":253,"line":1297},99,[251,1299,1300],{"class":257},"  vehicles",[251,1302,262],{"class":261},[251,1304,1306],{"class":253,"line":1305},100,[251,1307,1308],{"class":268},"    # Must return `vehicle.owner_id` or `vehicle.owner_identifier`, `vehicle.plate`, `vehicle.type`, `vehicle.model` columns\n",[251,1310,1312,1314,1316],{"class":253,"line":1311},101,[251,1313,624],{"class":257},[251,1315,278],{"class":261},[251,1317,629],{"class":320},[251,1319,1321,1323,1325],{"class":253,"line":1320},102,[251,1322,634],{"class":257},[251,1324,278],{"class":261},[251,1326,640],{"class":639},[251,1328,1330],{"class":253,"line":1329},103,[251,1331,645],{"class":284},[251,1333,1335],{"class":253,"line":1334},104,[251,1336,1337],{"class":284},"        `owned_vehicles`.`owner` AS `vehicle.owner_identifier`,\n",[251,1339,1341],{"class":253,"line":1340},105,[251,1342,1343],{"class":284},"        `owned_vehicles`.`plate` AS `vehicle.plate`,\n",[251,1345,1347],{"class":253,"line":1346},106,[251,1348,1349],{"class":284},"        `owned_vehicles`.`type` AS `vehicle.type`,\n",[251,1351,1353],{"class":253,"line":1352},107,[251,1354,1355],{"class":284},"        `owned_vehicles`.`model` AS `vehicle.model`\n",[251,1357,1359],{"class":253,"line":1358},108,[251,1360,662],{"class":284},[251,1362,1364],{"class":253,"line":1363},109,[251,1365,1366],{"class":284},"        `owned_vehicles`\n",[251,1368,1370],{"class":253,"line":1369},110,[251,1371,674],{"class":284},[251,1373,1375],{"class":253,"line":1374},111,[251,1376,680],{"class":284},[398,1378,1380],{"id":1379},"qbcore-framework","QBCore Framework",[242,1382,1384],{"className":244,"code":1383,"language":246,"meta":247,"style":247},"tables:\n  jobs:\n    # Must return `name`, `label` columns\n    enabled: false\n    query: |\n      SELECT\n        `jobs`.`name` AS `job.name`,\n        `jobs`.`label` AS `job.label`\n      FROM\n        `jobs`\n      LIMIT $limit\n      OFFSET $offset;\n  jobGrades:\n    # Must return `job_name`, `grade`, `label` columns (with condition for the `job_name` (`$jobName`))\n    enabled: false\n    query: |\n      SELECT\n        `job_grades`.`job_name` AS `job_grade.job_name`,\n        `job_grades`.`grade` AS `job_grade.grade`,\n        `job_grades`.`label` AS `job_grade.label`\n      FROM\n        `job_grades`\n      WHERE\n        `job_name` = $jobName\n      LIMIT $limit\n      OFFSET $offset;\n  licenses:\n    # Must return `type`, `label` columns\n    enabled: false\n    query: |\n      SELECT\n        `licenses`.`type` AS `license.type`,\n        `licenses`.`label` AS `license.label`\n      FROM\n        `licenses`\n      LIMIT $limit\n      OFFSET $offset;\n  users:\n    # Must return `id`, `identifier`, `group`, `firstname`, `lastname`, `dateofbirth`, `job`, `job_grade`, `sex`, `phone_number` columns\n    # Optional `height`, `visum`, `playtime` columns\n    enabled: false\n    #updatedTimeColumn: \"last_seen\"\n    # The identifier column should be a smart combination of values when using a multichar system.\n    # E.g., it is prefered to use a ESX like identifier layout for that case `charX:LICENSE`\n    query: |\n      SELECT\n        `players`.`id` AS `user.id`,\n        CONCAT(`players`.`cid`, ':', `players`.`citizenid`) AS `user.identifier`,\n        'user' AS `user.group`,\n        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.firstname')) AS `user.firstname`,\n        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.lastname')) AS `user.lastname`,\n        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.birthdate')) AS `user.dateofbirth`,\n        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.height')) AS `user.height`,\n        JSON_UNQUOTE(JSON_EXTRACT(`players`.`job`, '$.name')) AS `user.job`,\n        JSON_UNQUOTE(JSON_EXTRACT(`players`.`job`, '$.grade.level')) AS `user.job_grade`,\n        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.gender')) AS `user.sex`,\n      FROM\n        `players`\n      $whereCondition\n      LIMIT $limit\n      OFFSET $offset;\n    # If a lastname is not returned by the query, attempt to split the firstname into \"two\" parts\n    splitName: true\n    # Normalize date of birth value to the output format if possible\n    # Please see the Go `time` pkg documentation on potential date format layouts: https://pkg.go.dev/time#Layout\n    dateOfBirth:\n      formats:\n        - \"2006-01-02\" # 2000-10-18 = YYYY-MM-DD\n        - \"02/01/2006\" # 09/06/1993 = MM/DD/YYYY\n        - \"02.01.2006\" # 01.08.1982 = DD.MM.YYYY\n      outputFormat: \"02.01.2006\" # DD.MM.YYYY\n    valueMapping:\n      sex:\n        fallback: 'm'\n        values:\n          '1': 'f'\n  userLicenses:\n    # Must return `type`, `owner` columns\n    enabled: false\n    query: |\n      SELECT\n        `user_licenses`.`type` AS `user_license.type`,\n        `user_licenses`.`owner` AS `user_license.owner`\n      FROM\n        `user_licenses`\n      WHERE\n        `owner` = $identifier\n      LIMIT $limit\n      OFFSET $offset;\n  vehicles:\n    # Must return `owner_id` (DB User ID) or `owner_identifier`, `plate`, `type`, `model` columns\n    enabled: true\n    query: |\n      SELECT\n        IF(`player_vehicles`.job_vehicle=0, CONCAT(players.cid, ':', players.`citizenid`), NULL) AS `vehicle.owner_identifier`,\n        `player_vehicles`.`plate` AS `vehicle.plate`,\n        `player_vehicles`.`garage_type` AS `vehicle.type`,\n        `player_vehicles`.`vehicle` AS `vehicle.model`,\n        IF(`player_vehicles`.`job_vehicle`=1, `player_vehicles`.`citizenid`, NULL) AS `vehicle.job`\n      FROM\n        `player_vehicles`\n        LEFT JOIN `players` ON (`players`.`citizenid` = `player_vehicles`.`citizenid`)\n      LIMIT $limit\n      OFFSET $offset;\n",[219,1385,1386,1392,1398,1403,1411,1419,1423,1427,1431,1435,1439,1443,1447,1453,1458,1466,1474,1478,1483,1488,1493,1497,1502,1506,1511,1515,1519,1525,1529,1537,1545,1549,1554,1559,1563,1567,1571,1575,1581,1586,1591,1599,1603,1607,1611,1619,1623,1628,1633,1638,1643,1648,1653,1658,1663,1668,1673,1677,1682,1686,1690,1694,1698,1706,1710,1714,1720,1726,1738,1750,1762,1776,1782,1788,1800,1806,1822,1828,1833,1841,1849,1853,1857,1862,1866,1870,1874,1878,1882,1886,1892,1897,1905,1913,1917,1922,1927,1932,1937,1942,1946,1951,1956,1960],{"__ignoreMap":247},[251,1387,1388,1390],{"class":253,"line":254},[251,1389,600],{"class":257},[251,1391,262],{"class":261},[251,1393,1394,1396],{"class":253,"line":265},[251,1395,612],{"class":257},[251,1397,262],{"class":261},[251,1399,1400],{"class":253,"line":272},[251,1401,1402],{"class":268},"    # Must return `name`, `label` columns\n",[251,1404,1405,1407,1409],{"class":253,"line":291},[251,1406,624],{"class":257},[251,1408,278],{"class":261},[251,1410,321],{"class":320},[251,1412,1413,1415,1417],{"class":253,"line":306},[251,1414,634],{"class":257},[251,1416,278],{"class":261},[251,1418,640],{"class":639},[251,1420,1421],{"class":253,"line":312},[251,1422,645],{"class":284},[251,1424,1425],{"class":253,"line":324},[251,1426,650],{"class":284},[251,1428,1429],{"class":253,"line":330},[251,1430,656],{"class":284},[251,1432,1433],{"class":253,"line":653},[251,1434,662],{"class":284},[251,1436,1437],{"class":253,"line":659},[251,1438,668],{"class":284},[251,1440,1441],{"class":253,"line":665},[251,1442,674],{"class":284},[251,1444,1445],{"class":253,"line":671},[251,1446,680],{"class":284},[251,1448,1449,1451],{"class":253,"line":677},[251,1450,686],{"class":257},[251,1452,262],{"class":261},[251,1454,1455],{"class":253,"line":683},[251,1456,1457],{"class":268},"    # Must return `job_name`, `grade`, `label` columns (with condition for the `job_name` (`$jobName`))\n",[251,1459,1460,1462,1464],{"class":253,"line":691},[251,1461,624],{"class":257},[251,1463,278],{"class":261},[251,1465,321],{"class":320},[251,1467,1468,1470,1472],{"class":253,"line":697},[251,1469,634],{"class":257},[251,1471,278],{"class":261},[251,1473,640],{"class":639},[251,1475,1476],{"class":253,"line":706},[251,1477,645],{"class":284},[251,1479,1480],{"class":253,"line":713},[251,1481,1482],{"class":284},"        `job_grades`.`job_name` AS `job_grade.job_name`,\n",[251,1484,1485],{"class":253,"line":718},[251,1486,1487],{"class":284},"        `job_grades`.`grade` AS `job_grade.grade`,\n",[251,1489,1490],{"class":253,"line":727},[251,1491,1492],{"class":284},"        `job_grades`.`label` AS `job_grade.label`\n",[251,1494,1495],{"class":253,"line":735},[251,1496,662],{"class":284},[251,1498,1499],{"class":253,"line":743},[251,1500,1501],{"class":284},"        `job_grades`\n",[251,1503,1504],{"class":253,"line":751},[251,1505,767],{"class":284},[251,1507,1508],{"class":253,"line":756},[251,1509,1510],{"class":284},"        `job_name` = $jobName\n",[251,1512,1513],{"class":253,"line":764},[251,1514,674],{"class":284},[251,1516,1517],{"class":253,"line":770},[251,1518,680],{"class":284},[251,1520,1521,1523],{"class":253,"line":778},[251,1522,791],{"class":257},[251,1524,262],{"class":261},[251,1526,1527],{"class":253,"line":783},[251,1528,799],{"class":268},[251,1530,1531,1533,1535],{"class":253,"line":788},[251,1532,624],{"class":257},[251,1534,278],{"class":261},[251,1536,321],{"class":320},[251,1538,1539,1541,1543],{"class":253,"line":796},[251,1540,634],{"class":257},[251,1542,278],{"class":261},[251,1544,640],{"class":639},[251,1546,1547],{"class":253,"line":802},[251,1548,645],{"class":284},[251,1550,1551],{"class":253,"line":811},[251,1552,1553],{"class":284},"        `licenses`.`type` AS `license.type`,\n",[251,1555,1556],{"class":253,"line":820},[251,1557,1558],{"class":284},"        `licenses`.`label` AS `license.label`\n",[251,1560,1561],{"class":253,"line":825},[251,1562,662],{"class":284},[251,1564,1565],{"class":253,"line":831},[251,1566,845],{"class":284},[251,1568,1569],{"class":253,"line":837},[251,1570,674],{"class":284},[251,1572,1573],{"class":253,"line":842},[251,1574,680],{"class":284},[251,1576,1577,1579],{"class":253,"line":848},[251,1578,861],{"class":257},[251,1580,262],{"class":261},[251,1582,1583],{"class":253,"line":853},[251,1584,1585],{"class":268},"    # Must return `id`, `identifier`, `group`, `firstname`, `lastname`, `dateofbirth`, `job`, `job_grade`, `sex`, `phone_number` columns\n",[251,1587,1588],{"class":253,"line":858},[251,1589,1590],{"class":268},"    # Optional `height`, `visum`, `playtime` columns\n",[251,1592,1593,1595,1597],{"class":253,"line":866},[251,1594,624],{"class":257},[251,1596,278],{"class":261},[251,1598,321],{"class":320},[251,1600,1601],{"class":253,"line":872},[251,1602,902],{"class":268},[251,1604,1605],{"class":253,"line":878},[251,1606,908],{"class":268},[251,1608,1609],{"class":253,"line":887},[251,1610,914],{"class":268},[251,1612,1613,1615,1617],{"class":253,"line":893},[251,1614,634],{"class":257},[251,1616,278],{"class":261},[251,1618,640],{"class":639},[251,1620,1621],{"class":253,"line":899},[251,1622,645],{"class":284},[251,1624,1625],{"class":253,"line":905},[251,1626,1627],{"class":284},"        `players`.`id` AS `user.id`,\n",[251,1629,1630],{"class":253,"line":911},[251,1631,1632],{"class":284},"        CONCAT(`players`.`cid`, ':', `players`.`citizenid`) AS `user.identifier`,\n",[251,1634,1635],{"class":253,"line":917},[251,1636,1637],{"class":284},"        'user' AS `user.group`,\n",[251,1639,1640],{"class":253,"line":926},[251,1641,1642],{"class":284},"        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.firstname')) AS `user.firstname`,\n",[251,1644,1645],{"class":253,"line":931},[251,1646,1647],{"class":284},"        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.lastname')) AS `user.lastname`,\n",[251,1649,1650],{"class":253,"line":937},[251,1651,1652],{"class":284},"        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.birthdate')) AS `user.dateofbirth`,\n",[251,1654,1655],{"class":253,"line":943},[251,1656,1657],{"class":284},"        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.height')) AS `user.height`,\n",[251,1659,1660],{"class":253,"line":949},[251,1661,1662],{"class":284},"        JSON_UNQUOTE(JSON_EXTRACT(`players`.`job`, '$.name')) AS `user.job`,\n",[251,1664,1665],{"class":253,"line":955},[251,1666,1667],{"class":284},"        JSON_UNQUOTE(JSON_EXTRACT(`players`.`job`, '$.grade.level')) AS `user.job_grade`,\n",[251,1669,1670],{"class":253,"line":961},[251,1671,1672],{"class":284},"        JSON_UNQUOTE(JSON_EXTRACT(`players`.`charinfo`, '$.gender')) AS `user.sex`,\n",[251,1674,1675],{"class":253,"line":967},[251,1676,662],{"class":284},[251,1678,1679],{"class":253,"line":973},[251,1680,1681],{"class":284},"        `players`\n",[251,1683,1684],{"class":253,"line":979},[251,1685,1023],{"class":284},[251,1687,1688],{"class":253,"line":985},[251,1689,674],{"class":284},[251,1691,1692],{"class":253,"line":991},[251,1693,680],{"class":284},[251,1695,1696],{"class":253,"line":997},[251,1697,1039],{"class":268},[251,1699,1700,1702,1704],{"class":253,"line":1003},[251,1701,1045],{"class":257},[251,1703,278],{"class":261},[251,1705,629],{"class":320},[251,1707,1708],{"class":253,"line":1009},[251,1709,1055],{"class":268},[251,1711,1712],{"class":253,"line":1014},[251,1713,1061],{"class":268},[251,1715,1716,1718],{"class":253,"line":1020},[251,1717,1067],{"class":257},[251,1719,262],{"class":261},[251,1721,1722,1724],{"class":253,"line":1026},[251,1723,1075],{"class":257},[251,1725,262],{"class":261},[251,1727,1728,1730,1732,1734,1736],{"class":253,"line":1031},[251,1729,1083],{"class":261},[251,1731,281],{"class":261},[251,1733,1088],{"class":284},[251,1735,1091],{"class":261},[251,1737,1094],{"class":268},[251,1739,1740,1742,1744,1746,1748],{"class":253,"line":1036},[251,1741,1083],{"class":261},[251,1743,281],{"class":261},[251,1745,1104],{"class":284},[251,1747,1091],{"class":261},[251,1749,1109],{"class":268},[251,1751,1752,1754,1756,1758,1760],{"class":253,"line":1042},[251,1753,1083],{"class":261},[251,1755,281],{"class":261},[251,1757,1119],{"class":284},[251,1759,1091],{"class":261},[251,1761,1124],{"class":268},[251,1763,1764,1766,1768,1770,1772,1774],{"class":253,"line":1052},[251,1765,1130],{"class":257},[251,1767,278],{"class":261},[251,1769,281],{"class":261},[251,1771,1119],{"class":284},[251,1773,1091],{"class":261},[251,1775,1141],{"class":268},[251,1777,1778,1780],{"class":253,"line":1058},[251,1779,1147],{"class":257},[251,1781,262],{"class":261},[251,1783,1784,1786],{"class":253,"line":1064},[251,1785,1167],{"class":257},[251,1787,262],{"class":261},[251,1789,1790,1792,1794,1796,1798],{"class":253,"line":1072},[251,1791,1175],{"class":257},[251,1793,278],{"class":261},[251,1795,432],{"class":261},[251,1797,1182],{"class":284},[251,1799,1185],{"class":261},[251,1801,1802,1804],{"class":253,"line":1080},[251,1803,1191],{"class":257},[251,1805,262],{"class":261},[251,1807,1808,1810,1812,1814,1816,1818,1820],{"class":253,"line":1097},[251,1809,1199],{"class":261},[251,1811,1202],{"class":284},[251,1813,442],{"class":261},[251,1815,278],{"class":261},[251,1817,432],{"class":261},[251,1819,1211],{"class":284},[251,1821,1185],{"class":261},[251,1823,1824,1826],{"class":253,"line":1112},[251,1825,1219],{"class":257},[251,1827,262],{"class":261},[251,1829,1830],{"class":253,"line":1127},[251,1831,1832],{"class":268},"    # Must return `type`, `owner` columns\n",[251,1834,1835,1837,1839],{"class":253,"line":1144},[251,1836,624],{"class":257},[251,1838,278],{"class":261},[251,1840,321],{"class":320},[251,1842,1843,1845,1847],{"class":253,"line":1152},[251,1844,634],{"class":257},[251,1846,278],{"class":261},[251,1848,640],{"class":639},[251,1850,1851],{"class":253,"line":1158},[251,1852,645],{"class":284},[251,1854,1855],{"class":253,"line":1164},[251,1856,1256],{"class":284},[251,1858,1859],{"class":253,"line":1172},[251,1860,1861],{"class":284},"        `user_licenses`.`owner` AS `user_license.owner`\n",[251,1863,1864],{"class":253,"line":1188},[251,1865,662],{"class":284},[251,1867,1868],{"class":253,"line":1196},[251,1869,1273],{"class":284},[251,1871,1872],{"class":253,"line":1216},[251,1873,767],{"class":284},[251,1875,1876],{"class":253,"line":1224},[251,1877,1284],{"class":284},[251,1879,1880],{"class":253,"line":1230},[251,1881,674],{"class":284},[251,1883,1884],{"class":253,"line":1239},[251,1885,680],{"class":284},[251,1887,1888,1890],{"class":253,"line":1248},[251,1889,1300],{"class":257},[251,1891,262],{"class":261},[251,1893,1894],{"class":253,"line":1253},[251,1895,1896],{"class":268},"    # Must return `owner_id` (DB User ID) or `owner_identifier`, `plate`, `type`, `model` columns\n",[251,1898,1899,1901,1903],{"class":253,"line":1259},[251,1900,624],{"class":257},[251,1902,278],{"class":261},[251,1904,629],{"class":320},[251,1906,1907,1909,1911],{"class":253,"line":1265},[251,1908,634],{"class":257},[251,1910,278],{"class":261},[251,1912,640],{"class":639},[251,1914,1915],{"class":253,"line":1270},[251,1916,645],{"class":284},[251,1918,1919],{"class":253,"line":1276},[251,1920,1921],{"class":284},"        IF(`player_vehicles`.job_vehicle=0, CONCAT(players.cid, ':', players.`citizenid`), NULL) AS `vehicle.owner_identifier`,\n",[251,1923,1924],{"class":253,"line":1281},[251,1925,1926],{"class":284},"        `player_vehicles`.`plate` AS `vehicle.plate`,\n",[251,1928,1929],{"class":253,"line":1287},[251,1930,1931],{"class":284},"        `player_vehicles`.`garage_type` AS `vehicle.type`,\n",[251,1933,1934],{"class":253,"line":1292},[251,1935,1936],{"class":284},"        `player_vehicles`.`vehicle` AS `vehicle.model`,\n",[251,1938,1939],{"class":253,"line":1297},[251,1940,1941],{"class":284},"        IF(`player_vehicles`.`job_vehicle`=1, `player_vehicles`.`citizenid`, NULL) AS `vehicle.job`\n",[251,1943,1944],{"class":253,"line":1305},[251,1945,662],{"class":284},[251,1947,1948],{"class":253,"line":1311},[251,1949,1950],{"class":284},"        `player_vehicles`\n",[251,1952,1953],{"class":253,"line":1320},[251,1954,1955],{"class":284},"        LEFT JOIN `players` ON (`players`.`citizenid` = `player_vehicles`.`citizenid`)\n",[251,1957,1958],{"class":253,"line":1329},[251,1959,674],{"class":284},[251,1961,1962],{"class":253,"line":1334},[251,1963,680],{"class":284},[1965,1966,1967],"style",{},"html pre.shiki code .swJcz, html code.shiki .swJcz{--shiki-light:#E53935;--shiki-default:#F07178;--shiki-dark:#F07178}html pre.shiki code .sMK4o, html code.shiki .sMK4o{--shiki-light:#39ADB5;--shiki-default:#89DDFF;--shiki-dark:#89DDFF}html pre.shiki code .sHwdD, html code.shiki .sHwdD{--shiki-light:#90A4AE;--shiki-light-font-style:italic;--shiki-default:#546E7A;--shiki-default-font-style:italic;--shiki-dark:#676E95;--shiki-dark-font-style:italic}html pre.shiki code .sfazB, html code.shiki .sfazB{--shiki-light:#91B859;--shiki-default:#C3E88D;--shiki-dark:#C3E88D}html pre.shiki code .sfNiH, html code.shiki .sfNiH{--shiki-light:#FF5370;--shiki-default:#FF9CAC;--shiki-dark:#FF9CAC}html .light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html.light .shiki span {color: var(--shiki-light);background: var(--shiki-light-bg);font-style: var(--shiki-light-font-style);font-weight: var(--shiki-light-font-weight);text-decoration: var(--shiki-light-text-decoration);}html .default .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .shiki span {color: var(--shiki-default);background: var(--shiki-default-bg);font-style: var(--shiki-default-font-style);font-weight: var(--shiki-default-font-weight);text-decoration: var(--shiki-default-text-decoration);}html .dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html.dark .shiki span {color: var(--shiki-dark);background: var(--shiki-dark-bg);font-style: var(--shiki-dark-font-style);font-weight: var(--shiki-dark-font-weight);text-decoration: var(--shiki-dark-text-decoration);}html pre.shiki code .sbssI, html code.shiki .sbssI{--shiki-light:#F76D47;--shiki-default:#F78C6C;--shiki-dark:#F78C6C}html pre.shiki code .sTEyZ, html code.shiki .sTEyZ{--shiki-light:#90A4AE;--shiki-default:#EEFFFF;--shiki-dark:#BABED8}html pre.shiki code .s2Zo4, html code.shiki .s2Zo4{--shiki-light:#6182B8;--shiki-default:#82AAFF;--shiki-dark:#82AAFF}html pre.shiki code .s7zQu, html code.shiki .s7zQu{--shiki-light:#39ADB5;--shiki-light-font-style:italic;--shiki-default:#89DDFF;--shiki-default-font-style:italic;--shiki-dark:#89DDFF;--shiki-dark-font-style:italic}",{"title":247,"searchDepth":265,"depth":265,"links":1969},[1970,1971,1975,1976],{"id":211,"depth":265,"text":57},{"id":214,"depth":265,"text":23,"children":1972},[1973,1974],{"id":400,"depth":272,"text":401},{"id":511,"depth":272,"text":512},{"id":561,"depth":265,"text":562},{"id":585,"depth":265,"text":586,"children":1977},[1978,1979],{"id":589,"depth":272,"text":590},{"id":1379,"depth":272,"text":1380},"md",null,{},true,{"title":40,"description":183},"2l9PBa1m_5k5bdtUJdjoOCT4mMLyUXfTX8gbg_ZFjb4",[1987,1989],{"title":36,"path":37,"stem":38,"description":1988,"children":-1},"If you are using ESX and want to use your server's ESX tables directly, you can use the ESX Compatibility Mode option database.esxCompat: true.",{"title":44,"path":45,"stem":46,"description":247,"children":-1},1746110753095]